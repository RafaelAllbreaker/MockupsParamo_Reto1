/**
 * Autogenerated by Thrift Compiler (Shiyao Modified base on 0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TrackedObject_TYPES_H
#define TrackedObject_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "Math_types.h"
#include "AssignedRole_types.h"
#include "ObjectType_types.h"
#include "TrackingSource_types.h"


namespace mixcast { namespace data {

class TrackedObject;

typedef struct _TrackedObject__isset {
  _TrackedObject__isset() : name(false), source(false), objectType(false), assignedRole(false), hideFromUser(false), connected(false), position(false), rotation(false) {}
  bool name :1;
  bool source :1;
  bool objectType :1;
  bool assignedRole :1;
  bool hideFromUser :1;
  bool connected :1;
  bool position :1;
  bool rotation :1;
} _TrackedObject__isset;

class TrackedObject : public virtual ::apache::thrift::TBase {
 public:

  TrackedObject(const TrackedObject&);
  TrackedObject& operator=(const TrackedObject&);
  TrackedObject() : identifier(), name(), source(( ::mixcast::data::TrackingSource::type)0), objectType(( ::mixcast::data::ObjectType::type)0), assignedRole(( ::mixcast::data::AssignedRole::type)0), hideFromUser(0), connected(0) {
  }

  virtual ~TrackedObject() throw();
  std::string identifier;
  std::string name;
   ::mixcast::data::TrackingSource::type source;
   ::mixcast::data::ObjectType::type objectType;
   ::mixcast::data::AssignedRole::type assignedRole;
  bool hideFromUser;
  bool connected;
   ::mixcast::thrift::Vector3 position;
   ::mixcast::thrift::Quaternion rotation;

  _TrackedObject__isset __isset;

  void __set_identifier(const std::string& val);

  void __set_name(const std::string& val);

  void __set_source(const  ::mixcast::data::TrackingSource::type val);

  void __set_objectType(const  ::mixcast::data::ObjectType::type val);

  void __set_assignedRole(const  ::mixcast::data::AssignedRole::type val);

  void __set_hideFromUser(const bool val);

  void __set_connected(const bool val);

  void __set_position(const  ::mixcast::thrift::Vector3& val);

  void __set_rotation(const  ::mixcast::thrift::Quaternion& val);

  bool operator == (const TrackedObject & rhs) const
  {
    if (!(identifier == rhs.identifier))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(source == rhs.source))
      return false;
    if (!(objectType == rhs.objectType))
      return false;
    if (!(assignedRole == rhs.assignedRole))
      return false;
    if (!(hideFromUser == rhs.hideFromUser))
      return false;
    if (!(connected == rhs.connected))
      return false;
    if (!(position == rhs.position))
      return false;
    if (!(rotation == rhs.rotation))
      return false;
    return true;
  }
  bool operator != (const TrackedObject &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TrackedObject & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TrackedObject &a, TrackedObject &b);

std::ostream& operator<<(std::ostream& out, const TrackedObject& obj);

}} // namespace

#endif
