/**
 * Autogenerated by Thrift Compiler (Shiyao Modified base on 0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SDK_Service_H
#define SDK_Service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Service_SDK_types.h"

namespace mixcast { namespace thrift {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SDK_ServiceIf {
 public:
  virtual ~SDK_ServiceIf() {}
  virtual void validate_ping() = 0;
  virtual void validate_function_list(std::vector<std::string> & _return) = 0;
  virtual void NotifySdkStarted(const  ::mixcast::data::ExperienceMetadata& expData) = 0;
  virtual void NotifySdkStopped() = 0;
  virtual void UpdateCameraActive(const std::string& cameraId, const bool active) = 0;
  virtual void UpdateExperienceTrackedObjectMetadata(const std::vector< ::mixcast::data::TrackedObject> & trackedObjects) = 0;
  virtual void SendExperienceEvent(const std::string& eventId) = 0;
  virtual void RequestTakeSnapshot(const std::string& cameraId) = 0;
  virtual void RequestSetVideoRecording(const std::string& cameraId, const bool enableVideoRecording) = 0;
  virtual void RequestSetAutoSnapshot(const std::string& cameraId, const bool enableAutoSnapshot) = 0;
  virtual void RequestSetVideoStreaming(const std::string& cameraId, const bool enableVideoStreaming) = 0;
};

class SDK_ServiceIfFactory {
 public:
  typedef SDK_ServiceIf Handler;

  virtual ~SDK_ServiceIfFactory() {}

  virtual SDK_ServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SDK_ServiceIf* /* handler */) = 0;
};

class SDK_ServiceIfSingletonFactory : virtual public SDK_ServiceIfFactory {
 public:
  SDK_ServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<SDK_ServiceIf>& iface) : iface_(iface) {}
  virtual ~SDK_ServiceIfSingletonFactory() {}

  virtual SDK_ServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SDK_ServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<SDK_ServiceIf> iface_;
};

class SDK_ServiceNull : virtual public SDK_ServiceIf {
 public:
  virtual ~SDK_ServiceNull() {}
  void validate_ping() {
    return;
  }
  void validate_function_list(std::vector<std::string> & /* _return */) {
    return;
  }
  void NotifySdkStarted(const  ::mixcast::data::ExperienceMetadata& /* expData */) {
    return;
  }
  void NotifySdkStopped() {
    return;
  }
  void UpdateCameraActive(const std::string& /* cameraId */, const bool /* active */) {
    return;
  }
  void UpdateExperienceTrackedObjectMetadata(const std::vector< ::mixcast::data::TrackedObject> & /* trackedObjects */) {
    return;
  }
  void SendExperienceEvent(const std::string& /* eventId */) {
    return;
  }
  void RequestTakeSnapshot(const std::string& /* cameraId */) {
    return;
  }
  void RequestSetVideoRecording(const std::string& /* cameraId */, const bool /* enableVideoRecording */) {
    return;
  }
  void RequestSetAutoSnapshot(const std::string& /* cameraId */, const bool /* enableAutoSnapshot */) {
    return;
  }
  void RequestSetVideoStreaming(const std::string& /* cameraId */, const bool /* enableVideoStreaming */) {
    return;
  }
};


class SDK_Service_validate_ping_args {
 public:

  SDK_Service_validate_ping_args(const SDK_Service_validate_ping_args&);
  SDK_Service_validate_ping_args& operator=(const SDK_Service_validate_ping_args&);
  SDK_Service_validate_ping_args() {
  }

  virtual ~SDK_Service_validate_ping_args() throw();

  bool operator == (const SDK_Service_validate_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SDK_Service_validate_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SDK_Service_validate_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SDK_Service_validate_ping_pargs {
 public:


  virtual ~SDK_Service_validate_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SDK_Service_validate_ping_result {
 public:

  SDK_Service_validate_ping_result(const SDK_Service_validate_ping_result&);
  SDK_Service_validate_ping_result& operator=(const SDK_Service_validate_ping_result&);
  SDK_Service_validate_ping_result() {
  }

  virtual ~SDK_Service_validate_ping_result() throw();

  bool operator == (const SDK_Service_validate_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SDK_Service_validate_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SDK_Service_validate_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SDK_Service_validate_ping_presult {
 public:


  virtual ~SDK_Service_validate_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SDK_Service_validate_function_list_args {
 public:

  SDK_Service_validate_function_list_args(const SDK_Service_validate_function_list_args&);
  SDK_Service_validate_function_list_args& operator=(const SDK_Service_validate_function_list_args&);
  SDK_Service_validate_function_list_args() {
  }

  virtual ~SDK_Service_validate_function_list_args() throw();

  bool operator == (const SDK_Service_validate_function_list_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SDK_Service_validate_function_list_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SDK_Service_validate_function_list_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SDK_Service_validate_function_list_pargs {
 public:


  virtual ~SDK_Service_validate_function_list_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SDK_Service_validate_function_list_result__isset {
  _SDK_Service_validate_function_list_result__isset() : success(false) {}
  bool success :1;
} _SDK_Service_validate_function_list_result__isset;

class SDK_Service_validate_function_list_result {
 public:

  SDK_Service_validate_function_list_result(const SDK_Service_validate_function_list_result&);
  SDK_Service_validate_function_list_result& operator=(const SDK_Service_validate_function_list_result&);
  SDK_Service_validate_function_list_result() {
  }

  virtual ~SDK_Service_validate_function_list_result() throw();
  std::vector<std::string>  success;

  _SDK_Service_validate_function_list_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const SDK_Service_validate_function_list_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SDK_Service_validate_function_list_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SDK_Service_validate_function_list_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SDK_Service_validate_function_list_presult__isset {
  _SDK_Service_validate_function_list_presult__isset() : success(false) {}
  bool success :1;
} _SDK_Service_validate_function_list_presult__isset;

class SDK_Service_validate_function_list_presult {
 public:


  virtual ~SDK_Service_validate_function_list_presult() throw();
  std::vector<std::string> * success;

  _SDK_Service_validate_function_list_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SDK_Service_NotifySdkStarted_args__isset {
  _SDK_Service_NotifySdkStarted_args__isset() : expData(false) {}
  bool expData :1;
} _SDK_Service_NotifySdkStarted_args__isset;

class SDK_Service_NotifySdkStarted_args {
 public:

  SDK_Service_NotifySdkStarted_args(const SDK_Service_NotifySdkStarted_args&);
  SDK_Service_NotifySdkStarted_args& operator=(const SDK_Service_NotifySdkStarted_args&);
  SDK_Service_NotifySdkStarted_args() {
  }

  virtual ~SDK_Service_NotifySdkStarted_args() throw();
   ::mixcast::data::ExperienceMetadata expData;

  _SDK_Service_NotifySdkStarted_args__isset __isset;

  void __set_expData(const  ::mixcast::data::ExperienceMetadata& val);

  bool operator == (const SDK_Service_NotifySdkStarted_args & rhs) const
  {
    if (!(expData == rhs.expData))
      return false;
    return true;
  }
  bool operator != (const SDK_Service_NotifySdkStarted_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SDK_Service_NotifySdkStarted_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SDK_Service_NotifySdkStarted_pargs {
 public:


  virtual ~SDK_Service_NotifySdkStarted_pargs() throw();
  const  ::mixcast::data::ExperienceMetadata* expData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SDK_Service_NotifySdkStopped_args {
 public:

  SDK_Service_NotifySdkStopped_args(const SDK_Service_NotifySdkStopped_args&);
  SDK_Service_NotifySdkStopped_args& operator=(const SDK_Service_NotifySdkStopped_args&);
  SDK_Service_NotifySdkStopped_args() {
  }

  virtual ~SDK_Service_NotifySdkStopped_args() throw();

  bool operator == (const SDK_Service_NotifySdkStopped_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SDK_Service_NotifySdkStopped_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SDK_Service_NotifySdkStopped_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SDK_Service_NotifySdkStopped_pargs {
 public:


  virtual ~SDK_Service_NotifySdkStopped_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SDK_Service_UpdateCameraActive_args__isset {
  _SDK_Service_UpdateCameraActive_args__isset() : cameraId(false), active(false) {}
  bool cameraId :1;
  bool active :1;
} _SDK_Service_UpdateCameraActive_args__isset;

class SDK_Service_UpdateCameraActive_args {
 public:

  SDK_Service_UpdateCameraActive_args(const SDK_Service_UpdateCameraActive_args&);
  SDK_Service_UpdateCameraActive_args& operator=(const SDK_Service_UpdateCameraActive_args&);
  SDK_Service_UpdateCameraActive_args() : cameraId(), active(0) {
  }

  virtual ~SDK_Service_UpdateCameraActive_args() throw();
  std::string cameraId;
  bool active;

  _SDK_Service_UpdateCameraActive_args__isset __isset;

  void __set_cameraId(const std::string& val);

  void __set_active(const bool val);

  bool operator == (const SDK_Service_UpdateCameraActive_args & rhs) const
  {
    if (!(cameraId == rhs.cameraId))
      return false;
    if (!(active == rhs.active))
      return false;
    return true;
  }
  bool operator != (const SDK_Service_UpdateCameraActive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SDK_Service_UpdateCameraActive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SDK_Service_UpdateCameraActive_pargs {
 public:


  virtual ~SDK_Service_UpdateCameraActive_pargs() throw();
  const std::string* cameraId;
  const bool* active;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SDK_Service_UpdateExperienceTrackedObjectMetadata_args__isset {
  _SDK_Service_UpdateExperienceTrackedObjectMetadata_args__isset() : trackedObjects(false) {}
  bool trackedObjects :1;
} _SDK_Service_UpdateExperienceTrackedObjectMetadata_args__isset;

class SDK_Service_UpdateExperienceTrackedObjectMetadata_args {
 public:

  SDK_Service_UpdateExperienceTrackedObjectMetadata_args(const SDK_Service_UpdateExperienceTrackedObjectMetadata_args&);
  SDK_Service_UpdateExperienceTrackedObjectMetadata_args& operator=(const SDK_Service_UpdateExperienceTrackedObjectMetadata_args&);
  SDK_Service_UpdateExperienceTrackedObjectMetadata_args() {
  }

  virtual ~SDK_Service_UpdateExperienceTrackedObjectMetadata_args() throw();
  std::vector< ::mixcast::data::TrackedObject>  trackedObjects;

  _SDK_Service_UpdateExperienceTrackedObjectMetadata_args__isset __isset;

  void __set_trackedObjects(const std::vector< ::mixcast::data::TrackedObject> & val);

  bool operator == (const SDK_Service_UpdateExperienceTrackedObjectMetadata_args & rhs) const
  {
    if (!(trackedObjects == rhs.trackedObjects))
      return false;
    return true;
  }
  bool operator != (const SDK_Service_UpdateExperienceTrackedObjectMetadata_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SDK_Service_UpdateExperienceTrackedObjectMetadata_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SDK_Service_UpdateExperienceTrackedObjectMetadata_pargs {
 public:


  virtual ~SDK_Service_UpdateExperienceTrackedObjectMetadata_pargs() throw();
  const std::vector< ::mixcast::data::TrackedObject> * trackedObjects;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SDK_Service_SendExperienceEvent_args__isset {
  _SDK_Service_SendExperienceEvent_args__isset() : eventId(false) {}
  bool eventId :1;
} _SDK_Service_SendExperienceEvent_args__isset;

class SDK_Service_SendExperienceEvent_args {
 public:

  SDK_Service_SendExperienceEvent_args(const SDK_Service_SendExperienceEvent_args&);
  SDK_Service_SendExperienceEvent_args& operator=(const SDK_Service_SendExperienceEvent_args&);
  SDK_Service_SendExperienceEvent_args() : eventId() {
  }

  virtual ~SDK_Service_SendExperienceEvent_args() throw();
  std::string eventId;

  _SDK_Service_SendExperienceEvent_args__isset __isset;

  void __set_eventId(const std::string& val);

  bool operator == (const SDK_Service_SendExperienceEvent_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const SDK_Service_SendExperienceEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SDK_Service_SendExperienceEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SDK_Service_SendExperienceEvent_pargs {
 public:


  virtual ~SDK_Service_SendExperienceEvent_pargs() throw();
  const std::string* eventId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SDK_Service_RequestTakeSnapshot_args__isset {
  _SDK_Service_RequestTakeSnapshot_args__isset() : cameraId(false) {}
  bool cameraId :1;
} _SDK_Service_RequestTakeSnapshot_args__isset;

class SDK_Service_RequestTakeSnapshot_args {
 public:

  SDK_Service_RequestTakeSnapshot_args(const SDK_Service_RequestTakeSnapshot_args&);
  SDK_Service_RequestTakeSnapshot_args& operator=(const SDK_Service_RequestTakeSnapshot_args&);
  SDK_Service_RequestTakeSnapshot_args() : cameraId() {
  }

  virtual ~SDK_Service_RequestTakeSnapshot_args() throw();
  std::string cameraId;

  _SDK_Service_RequestTakeSnapshot_args__isset __isset;

  void __set_cameraId(const std::string& val);

  bool operator == (const SDK_Service_RequestTakeSnapshot_args & rhs) const
  {
    if (!(cameraId == rhs.cameraId))
      return false;
    return true;
  }
  bool operator != (const SDK_Service_RequestTakeSnapshot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SDK_Service_RequestTakeSnapshot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SDK_Service_RequestTakeSnapshot_pargs {
 public:


  virtual ~SDK_Service_RequestTakeSnapshot_pargs() throw();
  const std::string* cameraId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SDK_Service_RequestSetVideoRecording_args__isset {
  _SDK_Service_RequestSetVideoRecording_args__isset() : cameraId(false), enableVideoRecording(false) {}
  bool cameraId :1;
  bool enableVideoRecording :1;
} _SDK_Service_RequestSetVideoRecording_args__isset;

class SDK_Service_RequestSetVideoRecording_args {
 public:

  SDK_Service_RequestSetVideoRecording_args(const SDK_Service_RequestSetVideoRecording_args&);
  SDK_Service_RequestSetVideoRecording_args& operator=(const SDK_Service_RequestSetVideoRecording_args&);
  SDK_Service_RequestSetVideoRecording_args() : cameraId(), enableVideoRecording(0) {
  }

  virtual ~SDK_Service_RequestSetVideoRecording_args() throw();
  std::string cameraId;
  bool enableVideoRecording;

  _SDK_Service_RequestSetVideoRecording_args__isset __isset;

  void __set_cameraId(const std::string& val);

  void __set_enableVideoRecording(const bool val);

  bool operator == (const SDK_Service_RequestSetVideoRecording_args & rhs) const
  {
    if (!(cameraId == rhs.cameraId))
      return false;
    if (!(enableVideoRecording == rhs.enableVideoRecording))
      return false;
    return true;
  }
  bool operator != (const SDK_Service_RequestSetVideoRecording_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SDK_Service_RequestSetVideoRecording_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SDK_Service_RequestSetVideoRecording_pargs {
 public:


  virtual ~SDK_Service_RequestSetVideoRecording_pargs() throw();
  const std::string* cameraId;
  const bool* enableVideoRecording;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SDK_Service_RequestSetAutoSnapshot_args__isset {
  _SDK_Service_RequestSetAutoSnapshot_args__isset() : cameraId(false), enableAutoSnapshot(false) {}
  bool cameraId :1;
  bool enableAutoSnapshot :1;
} _SDK_Service_RequestSetAutoSnapshot_args__isset;

class SDK_Service_RequestSetAutoSnapshot_args {
 public:

  SDK_Service_RequestSetAutoSnapshot_args(const SDK_Service_RequestSetAutoSnapshot_args&);
  SDK_Service_RequestSetAutoSnapshot_args& operator=(const SDK_Service_RequestSetAutoSnapshot_args&);
  SDK_Service_RequestSetAutoSnapshot_args() : cameraId(), enableAutoSnapshot(0) {
  }

  virtual ~SDK_Service_RequestSetAutoSnapshot_args() throw();
  std::string cameraId;
  bool enableAutoSnapshot;

  _SDK_Service_RequestSetAutoSnapshot_args__isset __isset;

  void __set_cameraId(const std::string& val);

  void __set_enableAutoSnapshot(const bool val);

  bool operator == (const SDK_Service_RequestSetAutoSnapshot_args & rhs) const
  {
    if (!(cameraId == rhs.cameraId))
      return false;
    if (!(enableAutoSnapshot == rhs.enableAutoSnapshot))
      return false;
    return true;
  }
  bool operator != (const SDK_Service_RequestSetAutoSnapshot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SDK_Service_RequestSetAutoSnapshot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SDK_Service_RequestSetAutoSnapshot_pargs {
 public:


  virtual ~SDK_Service_RequestSetAutoSnapshot_pargs() throw();
  const std::string* cameraId;
  const bool* enableAutoSnapshot;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SDK_Service_RequestSetVideoStreaming_args__isset {
  _SDK_Service_RequestSetVideoStreaming_args__isset() : cameraId(false), enableVideoStreaming(false) {}
  bool cameraId :1;
  bool enableVideoStreaming :1;
} _SDK_Service_RequestSetVideoStreaming_args__isset;

class SDK_Service_RequestSetVideoStreaming_args {
 public:

  SDK_Service_RequestSetVideoStreaming_args(const SDK_Service_RequestSetVideoStreaming_args&);
  SDK_Service_RequestSetVideoStreaming_args& operator=(const SDK_Service_RequestSetVideoStreaming_args&);
  SDK_Service_RequestSetVideoStreaming_args() : cameraId(), enableVideoStreaming(0) {
  }

  virtual ~SDK_Service_RequestSetVideoStreaming_args() throw();
  std::string cameraId;
  bool enableVideoStreaming;

  _SDK_Service_RequestSetVideoStreaming_args__isset __isset;

  void __set_cameraId(const std::string& val);

  void __set_enableVideoStreaming(const bool val);

  bool operator == (const SDK_Service_RequestSetVideoStreaming_args & rhs) const
  {
    if (!(cameraId == rhs.cameraId))
      return false;
    if (!(enableVideoStreaming == rhs.enableVideoStreaming))
      return false;
    return true;
  }
  bool operator != (const SDK_Service_RequestSetVideoStreaming_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SDK_Service_RequestSetVideoStreaming_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SDK_Service_RequestSetVideoStreaming_pargs {
 public:


  virtual ~SDK_Service_RequestSetVideoStreaming_pargs() throw();
  const std::string* cameraId;
  const bool* enableVideoStreaming;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class SDK_ServiceClient : virtual public SDK_ServiceIf {
 public:
  SDK_ServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SDK_ServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void validate_ping();
  void send_validate_ping();
  void recv_validate_ping();
  void validate_function_list(std::vector<std::string> & _return);
  void send_validate_function_list();
  void recv_validate_function_list(std::vector<std::string> & _return);
  void NotifySdkStarted(const  ::mixcast::data::ExperienceMetadata& expData);
  void send_NotifySdkStarted(const  ::mixcast::data::ExperienceMetadata& expData);
  void NotifySdkStopped();
  void send_NotifySdkStopped();
  void UpdateCameraActive(const std::string& cameraId, const bool active);
  void send_UpdateCameraActive(const std::string& cameraId, const bool active);
  void UpdateExperienceTrackedObjectMetadata(const std::vector< ::mixcast::data::TrackedObject> & trackedObjects);
  void send_UpdateExperienceTrackedObjectMetadata(const std::vector< ::mixcast::data::TrackedObject> & trackedObjects);
  void SendExperienceEvent(const std::string& eventId);
  void send_SendExperienceEvent(const std::string& eventId);
  void RequestTakeSnapshot(const std::string& cameraId);
  void send_RequestTakeSnapshot(const std::string& cameraId);
  void RequestSetVideoRecording(const std::string& cameraId, const bool enableVideoRecording);
  void send_RequestSetVideoRecording(const std::string& cameraId, const bool enableVideoRecording);
  void RequestSetAutoSnapshot(const std::string& cameraId, const bool enableAutoSnapshot);
  void send_RequestSetAutoSnapshot(const std::string& cameraId, const bool enableAutoSnapshot);
  void RequestSetVideoStreaming(const std::string& cameraId, const bool enableVideoStreaming);
  void send_RequestSetVideoStreaming(const std::string& cameraId, const bool enableVideoStreaming);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SDK_ServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<SDK_ServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SDK_ServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_validate_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_validate_function_list(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_NotifySdkStarted(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_NotifySdkStopped(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateCameraActive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateExperienceTrackedObjectMetadata(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SendExperienceEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RequestTakeSnapshot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RequestSetVideoRecording(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RequestSetAutoSnapshot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RequestSetVideoStreaming(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SDK_ServiceProcessor(::apache::thrift::stdcxx::shared_ptr<SDK_ServiceIf> iface) :
    iface_(iface) {
    processMap_["validate_ping"] = &SDK_ServiceProcessor::process_validate_ping;
    processMap_["validate_function_list"] = &SDK_ServiceProcessor::process_validate_function_list;
    processMap_["NotifySdkStarted"] = &SDK_ServiceProcessor::process_NotifySdkStarted;
    processMap_["NotifySdkStopped"] = &SDK_ServiceProcessor::process_NotifySdkStopped;
    processMap_["UpdateCameraActive"] = &SDK_ServiceProcessor::process_UpdateCameraActive;
    processMap_["UpdateExperienceTrackedObjectMetadata"] = &SDK_ServiceProcessor::process_UpdateExperienceTrackedObjectMetadata;
    processMap_["SendExperienceEvent"] = &SDK_ServiceProcessor::process_SendExperienceEvent;
    processMap_["RequestTakeSnapshot"] = &SDK_ServiceProcessor::process_RequestTakeSnapshot;
    processMap_["RequestSetVideoRecording"] = &SDK_ServiceProcessor::process_RequestSetVideoRecording;
    processMap_["RequestSetAutoSnapshot"] = &SDK_ServiceProcessor::process_RequestSetAutoSnapshot;
    processMap_["RequestSetVideoStreaming"] = &SDK_ServiceProcessor::process_RequestSetVideoStreaming;
  }

  virtual ~SDK_ServiceProcessor() {}
};

class SDK_ServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SDK_ServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< SDK_ServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< SDK_ServiceIfFactory > handlerFactory_;
};

class SDK_ServiceMultiface : virtual public SDK_ServiceIf {
 public:
  SDK_ServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<SDK_ServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SDK_ServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<SDK_ServiceIf> > ifaces_;
  SDK_ServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<SDK_ServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void validate_ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->validate_ping();
    }
    ifaces_[i]->validate_ping();
  }

  void validate_function_list(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->validate_function_list(_return);
    }
    ifaces_[i]->validate_function_list(_return);
    return;
  }

  void NotifySdkStarted(const  ::mixcast::data::ExperienceMetadata& expData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->NotifySdkStarted(expData);
    }
    ifaces_[i]->NotifySdkStarted(expData);
  }

  void NotifySdkStopped() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->NotifySdkStopped();
    }
    ifaces_[i]->NotifySdkStopped();
  }

  void UpdateCameraActive(const std::string& cameraId, const bool active) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateCameraActive(cameraId, active);
    }
    ifaces_[i]->UpdateCameraActive(cameraId, active);
  }

  void UpdateExperienceTrackedObjectMetadata(const std::vector< ::mixcast::data::TrackedObject> & trackedObjects) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateExperienceTrackedObjectMetadata(trackedObjects);
    }
    ifaces_[i]->UpdateExperienceTrackedObjectMetadata(trackedObjects);
  }

  void SendExperienceEvent(const std::string& eventId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SendExperienceEvent(eventId);
    }
    ifaces_[i]->SendExperienceEvent(eventId);
  }

  void RequestTakeSnapshot(const std::string& cameraId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RequestTakeSnapshot(cameraId);
    }
    ifaces_[i]->RequestTakeSnapshot(cameraId);
  }

  void RequestSetVideoRecording(const std::string& cameraId, const bool enableVideoRecording) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RequestSetVideoRecording(cameraId, enableVideoRecording);
    }
    ifaces_[i]->RequestSetVideoRecording(cameraId, enableVideoRecording);
  }

  void RequestSetAutoSnapshot(const std::string& cameraId, const bool enableAutoSnapshot) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RequestSetAutoSnapshot(cameraId, enableAutoSnapshot);
    }
    ifaces_[i]->RequestSetAutoSnapshot(cameraId, enableAutoSnapshot);
  }

  void RequestSetVideoStreaming(const std::string& cameraId, const bool enableVideoStreaming) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RequestSetVideoStreaming(cameraId, enableVideoStreaming);
    }
    ifaces_[i]->RequestSetVideoStreaming(cameraId, enableVideoStreaming);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SDK_ServiceConcurrentClient : virtual public SDK_ServiceIf {
 public:
  SDK_ServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SDK_ServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void validate_ping();
  int32_t send_validate_ping();
  void recv_validate_ping(const int32_t seqid);
  void validate_function_list(std::vector<std::string> & _return);
  int32_t send_validate_function_list();
  void recv_validate_function_list(std::vector<std::string> & _return, const int32_t seqid);
  void NotifySdkStarted(const  ::mixcast::data::ExperienceMetadata& expData);
  void send_NotifySdkStarted(const  ::mixcast::data::ExperienceMetadata& expData);
  void NotifySdkStopped();
  void send_NotifySdkStopped();
  void UpdateCameraActive(const std::string& cameraId, const bool active);
  void send_UpdateCameraActive(const std::string& cameraId, const bool active);
  void UpdateExperienceTrackedObjectMetadata(const std::vector< ::mixcast::data::TrackedObject> & trackedObjects);
  void send_UpdateExperienceTrackedObjectMetadata(const std::vector< ::mixcast::data::TrackedObject> & trackedObjects);
  void SendExperienceEvent(const std::string& eventId);
  void send_SendExperienceEvent(const std::string& eventId);
  void RequestTakeSnapshot(const std::string& cameraId);
  void send_RequestTakeSnapshot(const std::string& cameraId);
  void RequestSetVideoRecording(const std::string& cameraId, const bool enableVideoRecording);
  void send_RequestSetVideoRecording(const std::string& cameraId, const bool enableVideoRecording);
  void RequestSetAutoSnapshot(const std::string& cameraId, const bool enableAutoSnapshot);
  void send_RequestSetAutoSnapshot(const std::string& cameraId, const bool enableAutoSnapshot);
  void RequestSetVideoStreaming(const std::string& cameraId, const bool enableVideoStreaming);
  void send_RequestSetVideoStreaming(const std::string& cameraId, const bool enableVideoStreaming);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
