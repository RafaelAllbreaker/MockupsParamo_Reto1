/**
 * Autogenerated by Thrift Compiler (Shiyao Modified base on 0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "SDK_Service.h"

namespace mixcast { namespace thrift {


SDK_Service_validate_ping_args::~SDK_Service_validate_ping_args() throw() {
}


uint32_t SDK_Service_validate_ping_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDK_Service_validate_ping_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_validate_ping_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_validate_ping_pargs::~SDK_Service_validate_ping_pargs() throw() {
}


uint32_t SDK_Service_validate_ping_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_validate_ping_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_validate_ping_result::~SDK_Service_validate_ping_result() throw() {
}


uint32_t SDK_Service_validate_ping_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDK_Service_validate_ping_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("SDK_Service_validate_ping_result");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_validate_ping_presult::~SDK_Service_validate_ping_presult() throw() {
}


uint32_t SDK_Service_validate_ping_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


SDK_Service_validate_function_list_args::~SDK_Service_validate_function_list_args() throw() {
}


uint32_t SDK_Service_validate_function_list_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDK_Service_validate_function_list_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_validate_function_list_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_validate_function_list_pargs::~SDK_Service_validate_function_list_pargs() throw() {
}


uint32_t SDK_Service_validate_function_list_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_validate_function_list_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_validate_function_list_result::~SDK_Service_validate_function_list_result() throw() {
}


uint32_t SDK_Service_validate_function_list_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size39;
            ::apache::thrift::protocol::TType _etype42;
            xfer += iprot->readListBegin(_etype42, _size39);
            this->success.resize(_size39);
            uint32_t _i43;
            for (_i43 = 0; _i43 < _size39; ++_i43)
            {
              xfer += iprot->readString(this->success[_i43]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDK_Service_validate_function_list_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("SDK_Service_validate_function_list_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
      std::vector<std::string> ::const_iterator _iter44;
      for (_iter44 = this->success.begin(); _iter44 != this->success.end(); ++_iter44)
      {
        xfer += oprot->writeString((*_iter44));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_validate_function_list_presult::~SDK_Service_validate_function_list_presult() throw() {
}


uint32_t SDK_Service_validate_function_list_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size45;
            ::apache::thrift::protocol::TType _etype48;
            xfer += iprot->readListBegin(_etype48, _size45);
            (*(this->success)).resize(_size45);
            uint32_t _i49;
            for (_i49 = 0; _i49 < _size45; ++_i49)
            {
              xfer += iprot->readString((*(this->success))[_i49]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


SDK_Service_NotifySdkStarted_args::~SDK_Service_NotifySdkStarted_args() throw() {
}


uint32_t SDK_Service_NotifySdkStarted_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->expData.read(iprot);
          this->__isset.expData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDK_Service_NotifySdkStarted_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_NotifySdkStarted_args");

  xfer += oprot->writeFieldBegin("expData", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->expData.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_NotifySdkStarted_pargs::~SDK_Service_NotifySdkStarted_pargs() throw() {
}


uint32_t SDK_Service_NotifySdkStarted_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_NotifySdkStarted_pargs");

  xfer += oprot->writeFieldBegin("expData", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->expData)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_NotifySdkStopped_args::~SDK_Service_NotifySdkStopped_args() throw() {
}


uint32_t SDK_Service_NotifySdkStopped_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDK_Service_NotifySdkStopped_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_NotifySdkStopped_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_NotifySdkStopped_pargs::~SDK_Service_NotifySdkStopped_pargs() throw() {
}


uint32_t SDK_Service_NotifySdkStopped_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_NotifySdkStopped_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_UpdateCameraActive_args::~SDK_Service_UpdateCameraActive_args() throw() {
}


uint32_t SDK_Service_UpdateCameraActive_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cameraId);
          this->__isset.cameraId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->active);
          this->__isset.active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDK_Service_UpdateCameraActive_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_UpdateCameraActive_args");

  xfer += oprot->writeFieldBegin("cameraId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->cameraId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->active);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_UpdateCameraActive_pargs::~SDK_Service_UpdateCameraActive_pargs() throw() {
}


uint32_t SDK_Service_UpdateCameraActive_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_UpdateCameraActive_pargs");

  xfer += oprot->writeFieldBegin("cameraId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->cameraId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool((*(this->active)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_UpdateExperienceTrackedObjectMetadata_args::~SDK_Service_UpdateExperienceTrackedObjectMetadata_args() throw() {
}


uint32_t SDK_Service_UpdateExperienceTrackedObjectMetadata_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->trackedObjects.clear();
            uint32_t _size50;
            ::apache::thrift::protocol::TType _etype53;
            xfer += iprot->readListBegin(_etype53, _size50);
            this->trackedObjects.resize(_size50);
            uint32_t _i54;
            for (_i54 = 0; _i54 < _size50; ++_i54)
            {
              xfer += this->trackedObjects[_i54].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.trackedObjects = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDK_Service_UpdateExperienceTrackedObjectMetadata_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_UpdateExperienceTrackedObjectMetadata_args");

  xfer += oprot->writeFieldBegin("trackedObjects", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->trackedObjects.size()));
    std::vector< ::mixcast::data::TrackedObject> ::const_iterator _iter55;
    for (_iter55 = this->trackedObjects.begin(); _iter55 != this->trackedObjects.end(); ++_iter55)
    {
      xfer += (*_iter55).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_UpdateExperienceTrackedObjectMetadata_pargs::~SDK_Service_UpdateExperienceTrackedObjectMetadata_pargs() throw() {
}


uint32_t SDK_Service_UpdateExperienceTrackedObjectMetadata_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_UpdateExperienceTrackedObjectMetadata_pargs");

  xfer += oprot->writeFieldBegin("trackedObjects", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->trackedObjects)).size()));
    std::vector< ::mixcast::data::TrackedObject> ::const_iterator _iter56;
    for (_iter56 = (*(this->trackedObjects)).begin(); _iter56 != (*(this->trackedObjects)).end(); ++_iter56)
    {
      xfer += (*_iter56).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_SendExperienceEvent_args::~SDK_Service_SendExperienceEvent_args() throw() {
}


uint32_t SDK_Service_SendExperienceEvent_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventId);
          this->__isset.eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDK_Service_SendExperienceEvent_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_SendExperienceEvent_args");

  xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->eventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_SendExperienceEvent_pargs::~SDK_Service_SendExperienceEvent_pargs() throw() {
}


uint32_t SDK_Service_SendExperienceEvent_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_SendExperienceEvent_pargs");

  xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->eventId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_RequestTakeSnapshot_args::~SDK_Service_RequestTakeSnapshot_args() throw() {
}


uint32_t SDK_Service_RequestTakeSnapshot_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cameraId);
          this->__isset.cameraId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDK_Service_RequestTakeSnapshot_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_RequestTakeSnapshot_args");

  xfer += oprot->writeFieldBegin("cameraId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->cameraId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_RequestTakeSnapshot_pargs::~SDK_Service_RequestTakeSnapshot_pargs() throw() {
}


uint32_t SDK_Service_RequestTakeSnapshot_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_RequestTakeSnapshot_pargs");

  xfer += oprot->writeFieldBegin("cameraId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->cameraId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_RequestSetVideoRecording_args::~SDK_Service_RequestSetVideoRecording_args() throw() {
}


uint32_t SDK_Service_RequestSetVideoRecording_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cameraId);
          this->__isset.cameraId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableVideoRecording);
          this->__isset.enableVideoRecording = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDK_Service_RequestSetVideoRecording_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_RequestSetVideoRecording_args");

  xfer += oprot->writeFieldBegin("cameraId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->cameraId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enableVideoRecording", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->enableVideoRecording);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_RequestSetVideoRecording_pargs::~SDK_Service_RequestSetVideoRecording_pargs() throw() {
}


uint32_t SDK_Service_RequestSetVideoRecording_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_RequestSetVideoRecording_pargs");

  xfer += oprot->writeFieldBegin("cameraId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->cameraId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enableVideoRecording", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool((*(this->enableVideoRecording)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_RequestSetAutoSnapshot_args::~SDK_Service_RequestSetAutoSnapshot_args() throw() {
}


uint32_t SDK_Service_RequestSetAutoSnapshot_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cameraId);
          this->__isset.cameraId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableAutoSnapshot);
          this->__isset.enableAutoSnapshot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDK_Service_RequestSetAutoSnapshot_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_RequestSetAutoSnapshot_args");

  xfer += oprot->writeFieldBegin("cameraId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->cameraId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enableAutoSnapshot", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->enableAutoSnapshot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_RequestSetAutoSnapshot_pargs::~SDK_Service_RequestSetAutoSnapshot_pargs() throw() {
}


uint32_t SDK_Service_RequestSetAutoSnapshot_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_RequestSetAutoSnapshot_pargs");

  xfer += oprot->writeFieldBegin("cameraId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->cameraId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enableAutoSnapshot", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool((*(this->enableAutoSnapshot)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_RequestSetVideoStreaming_args::~SDK_Service_RequestSetVideoStreaming_args() throw() {
}


uint32_t SDK_Service_RequestSetVideoStreaming_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cameraId);
          this->__isset.cameraId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableVideoStreaming);
          this->__isset.enableVideoStreaming = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SDK_Service_RequestSetVideoStreaming_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_RequestSetVideoStreaming_args");

  xfer += oprot->writeFieldBegin("cameraId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->cameraId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enableVideoStreaming", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->enableVideoStreaming);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SDK_Service_RequestSetVideoStreaming_pargs::~SDK_Service_RequestSetVideoStreaming_pargs() throw() {
}


uint32_t SDK_Service_RequestSetVideoStreaming_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SDK_Service_RequestSetVideoStreaming_pargs");

  xfer += oprot->writeFieldBegin("cameraId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->cameraId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enableVideoStreaming", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool((*(this->enableVideoStreaming)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void SDK_ServiceClient::validate_ping()
{
  send_validate_ping();
  recv_validate_ping();
}

void SDK_ServiceClient::send_validate_ping()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("validate_ping", ::apache::thrift::protocol::T_CALL, cseqid);

  SDK_Service_validate_ping_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SDK_ServiceClient::recv_validate_ping()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("validate_ping") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  SDK_Service_validate_ping_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  return;
}

void SDK_ServiceClient::validate_function_list(std::vector<std::string> & _return)
{
  send_validate_function_list();
  recv_validate_function_list(_return);
}

void SDK_ServiceClient::send_validate_function_list()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("validate_function_list", ::apache::thrift::protocol::T_CALL, cseqid);

  SDK_Service_validate_function_list_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SDK_ServiceClient::recv_validate_function_list(std::vector<std::string> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("validate_function_list") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  SDK_Service_validate_function_list_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "validate_function_list failed: unknown result");
}

void SDK_ServiceClient::NotifySdkStarted(const  ::mixcast::data::ExperienceMetadata& expData)
{
  send_NotifySdkStarted(expData);
}

void SDK_ServiceClient::send_NotifySdkStarted(const  ::mixcast::data::ExperienceMetadata& expData)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("NotifySdkStarted", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SDK_Service_NotifySdkStarted_pargs args;
  args.expData = &expData;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SDK_ServiceClient::NotifySdkStopped()
{
  send_NotifySdkStopped();
}

void SDK_ServiceClient::send_NotifySdkStopped()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("NotifySdkStopped", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SDK_Service_NotifySdkStopped_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SDK_ServiceClient::UpdateCameraActive(const std::string& cameraId, const bool active)
{
  send_UpdateCameraActive(cameraId, active);
}

void SDK_ServiceClient::send_UpdateCameraActive(const std::string& cameraId, const bool active)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("UpdateCameraActive", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SDK_Service_UpdateCameraActive_pargs args;
  args.cameraId = &cameraId;
  args.active = &active;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SDK_ServiceClient::UpdateExperienceTrackedObjectMetadata(const std::vector< ::mixcast::data::TrackedObject> & trackedObjects)
{
  send_UpdateExperienceTrackedObjectMetadata(trackedObjects);
}

void SDK_ServiceClient::send_UpdateExperienceTrackedObjectMetadata(const std::vector< ::mixcast::data::TrackedObject> & trackedObjects)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("UpdateExperienceTrackedObjectMetadata", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SDK_Service_UpdateExperienceTrackedObjectMetadata_pargs args;
  args.trackedObjects = &trackedObjects;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SDK_ServiceClient::SendExperienceEvent(const std::string& eventId)
{
  send_SendExperienceEvent(eventId);
}

void SDK_ServiceClient::send_SendExperienceEvent(const std::string& eventId)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("SendExperienceEvent", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SDK_Service_SendExperienceEvent_pargs args;
  args.eventId = &eventId;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SDK_ServiceClient::RequestTakeSnapshot(const std::string& cameraId)
{
  send_RequestTakeSnapshot(cameraId);
}

void SDK_ServiceClient::send_RequestTakeSnapshot(const std::string& cameraId)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("RequestTakeSnapshot", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SDK_Service_RequestTakeSnapshot_pargs args;
  args.cameraId = &cameraId;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SDK_ServiceClient::RequestSetVideoRecording(const std::string& cameraId, const bool enableVideoRecording)
{
  send_RequestSetVideoRecording(cameraId, enableVideoRecording);
}

void SDK_ServiceClient::send_RequestSetVideoRecording(const std::string& cameraId, const bool enableVideoRecording)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("RequestSetVideoRecording", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SDK_Service_RequestSetVideoRecording_pargs args;
  args.cameraId = &cameraId;
  args.enableVideoRecording = &enableVideoRecording;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SDK_ServiceClient::RequestSetAutoSnapshot(const std::string& cameraId, const bool enableAutoSnapshot)
{
  send_RequestSetAutoSnapshot(cameraId, enableAutoSnapshot);
}

void SDK_ServiceClient::send_RequestSetAutoSnapshot(const std::string& cameraId, const bool enableAutoSnapshot)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("RequestSetAutoSnapshot", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SDK_Service_RequestSetAutoSnapshot_pargs args;
  args.cameraId = &cameraId;
  args.enableAutoSnapshot = &enableAutoSnapshot;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SDK_ServiceClient::RequestSetVideoStreaming(const std::string& cameraId, const bool enableVideoStreaming)
{
  send_RequestSetVideoStreaming(cameraId, enableVideoStreaming);
}

void SDK_ServiceClient::send_RequestSetVideoStreaming(const std::string& cameraId, const bool enableVideoStreaming)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("RequestSetVideoStreaming", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SDK_Service_RequestSetVideoStreaming_pargs args;
  args.cameraId = &cameraId;
  args.enableVideoStreaming = &enableVideoStreaming;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

bool SDK_ServiceProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void SDK_ServiceProcessor::process_validate_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SDK_Service.validate_ping", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SDK_Service.validate_ping");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SDK_Service.validate_ping");
  }

  SDK_Service_validate_ping_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SDK_Service.validate_ping", bytes);
  }

  SDK_Service_validate_ping_result result;
  try {
    iface_->validate_ping();
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SDK_Service.validate_ping");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("validate_ping", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "SDK_Service.validate_ping");
  }

  oprot->writeMessageBegin("validate_ping", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "SDK_Service.validate_ping", bytes);
  }
}

void SDK_ServiceProcessor::process_validate_function_list(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SDK_Service.validate_function_list", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SDK_Service.validate_function_list");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SDK_Service.validate_function_list");
  }

  SDK_Service_validate_function_list_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SDK_Service.validate_function_list", bytes);
  }

  SDK_Service_validate_function_list_result result;
  try {
    iface_->validate_function_list(result.success);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SDK_Service.validate_function_list");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("validate_function_list", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "SDK_Service.validate_function_list");
  }

  oprot->writeMessageBegin("validate_function_list", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "SDK_Service.validate_function_list", bytes);
  }
}

void SDK_ServiceProcessor::process_NotifySdkStarted(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SDK_Service.NotifySdkStarted", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SDK_Service.NotifySdkStarted");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SDK_Service.NotifySdkStarted");
  }

  SDK_Service_NotifySdkStarted_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SDK_Service.NotifySdkStarted", bytes);
  }

  try {
    iface_->NotifySdkStarted(args.expData);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SDK_Service.NotifySdkStarted");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "SDK_Service.NotifySdkStarted");
  }

  return;
}

void SDK_ServiceProcessor::process_NotifySdkStopped(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SDK_Service.NotifySdkStopped", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SDK_Service.NotifySdkStopped");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SDK_Service.NotifySdkStopped");
  }

  SDK_Service_NotifySdkStopped_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SDK_Service.NotifySdkStopped", bytes);
  }

  try {
    iface_->NotifySdkStopped();
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SDK_Service.NotifySdkStopped");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "SDK_Service.NotifySdkStopped");
  }

  return;
}

void SDK_ServiceProcessor::process_UpdateCameraActive(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SDK_Service.UpdateCameraActive", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SDK_Service.UpdateCameraActive");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SDK_Service.UpdateCameraActive");
  }

  SDK_Service_UpdateCameraActive_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SDK_Service.UpdateCameraActive", bytes);
  }

  try {
    iface_->UpdateCameraActive(args.cameraId, args.active);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SDK_Service.UpdateCameraActive");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "SDK_Service.UpdateCameraActive");
  }

  return;
}

void SDK_ServiceProcessor::process_UpdateExperienceTrackedObjectMetadata(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SDK_Service.UpdateExperienceTrackedObjectMetadata", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SDK_Service.UpdateExperienceTrackedObjectMetadata");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SDK_Service.UpdateExperienceTrackedObjectMetadata");
  }

  SDK_Service_UpdateExperienceTrackedObjectMetadata_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SDK_Service.UpdateExperienceTrackedObjectMetadata", bytes);
  }

  try {
    iface_->UpdateExperienceTrackedObjectMetadata(args.trackedObjects);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SDK_Service.UpdateExperienceTrackedObjectMetadata");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "SDK_Service.UpdateExperienceTrackedObjectMetadata");
  }

  return;
}

void SDK_ServiceProcessor::process_SendExperienceEvent(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SDK_Service.SendExperienceEvent", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SDK_Service.SendExperienceEvent");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SDK_Service.SendExperienceEvent");
  }

  SDK_Service_SendExperienceEvent_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SDK_Service.SendExperienceEvent", bytes);
  }

  try {
    iface_->SendExperienceEvent(args.eventId);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SDK_Service.SendExperienceEvent");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "SDK_Service.SendExperienceEvent");
  }

  return;
}

void SDK_ServiceProcessor::process_RequestTakeSnapshot(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SDK_Service.RequestTakeSnapshot", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SDK_Service.RequestTakeSnapshot");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SDK_Service.RequestTakeSnapshot");
  }

  SDK_Service_RequestTakeSnapshot_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SDK_Service.RequestTakeSnapshot", bytes);
  }

  try {
    iface_->RequestTakeSnapshot(args.cameraId);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SDK_Service.RequestTakeSnapshot");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "SDK_Service.RequestTakeSnapshot");
  }

  return;
}

void SDK_ServiceProcessor::process_RequestSetVideoRecording(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SDK_Service.RequestSetVideoRecording", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SDK_Service.RequestSetVideoRecording");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SDK_Service.RequestSetVideoRecording");
  }

  SDK_Service_RequestSetVideoRecording_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SDK_Service.RequestSetVideoRecording", bytes);
  }

  try {
    iface_->RequestSetVideoRecording(args.cameraId, args.enableVideoRecording);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SDK_Service.RequestSetVideoRecording");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "SDK_Service.RequestSetVideoRecording");
  }

  return;
}

void SDK_ServiceProcessor::process_RequestSetAutoSnapshot(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SDK_Service.RequestSetAutoSnapshot", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SDK_Service.RequestSetAutoSnapshot");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SDK_Service.RequestSetAutoSnapshot");
  }

  SDK_Service_RequestSetAutoSnapshot_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SDK_Service.RequestSetAutoSnapshot", bytes);
  }

  try {
    iface_->RequestSetAutoSnapshot(args.cameraId, args.enableAutoSnapshot);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SDK_Service.RequestSetAutoSnapshot");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "SDK_Service.RequestSetAutoSnapshot");
  }

  return;
}

void SDK_ServiceProcessor::process_RequestSetVideoStreaming(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SDK_Service.RequestSetVideoStreaming", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SDK_Service.RequestSetVideoStreaming");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SDK_Service.RequestSetVideoStreaming");
  }

  SDK_Service_RequestSetVideoStreaming_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SDK_Service.RequestSetVideoStreaming", bytes);
  }

  try {
    iface_->RequestSetVideoStreaming(args.cameraId, args.enableVideoStreaming);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SDK_Service.RequestSetVideoStreaming");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "SDK_Service.RequestSetVideoStreaming");
  }

  return;
}

::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > SDK_ServiceProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< SDK_ServiceIfFactory > cleanup(handlerFactory_);
  ::apache::thrift::stdcxx::shared_ptr< SDK_ServiceIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > processor(new SDK_ServiceProcessor(handler));
  return processor;
}

void SDK_ServiceConcurrentClient::validate_ping()
{
  int32_t seqid = send_validate_ping();
  recv_validate_ping(seqid);
}

int32_t SDK_ServiceConcurrentClient::send_validate_ping()
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("validate_ping", ::apache::thrift::protocol::T_CALL, cseqid);

  SDK_Service_validate_ping_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void SDK_ServiceConcurrentClient::recv_validate_ping(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("validate_ping") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      SDK_Service_validate_ping_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void SDK_ServiceConcurrentClient::validate_function_list(std::vector<std::string> & _return)
{
  int32_t seqid = send_validate_function_list();
  recv_validate_function_list(_return, seqid);
}

int32_t SDK_ServiceConcurrentClient::send_validate_function_list()
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("validate_function_list", ::apache::thrift::protocol::T_CALL, cseqid);

  SDK_Service_validate_function_list_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void SDK_ServiceConcurrentClient::recv_validate_function_list(std::vector<std::string> & _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("validate_function_list") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      SDK_Service_validate_function_list_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "validate_function_list failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void SDK_ServiceConcurrentClient::NotifySdkStarted(const  ::mixcast::data::ExperienceMetadata& expData)
{
  send_NotifySdkStarted(expData);
}

void SDK_ServiceConcurrentClient::send_NotifySdkStarted(const  ::mixcast::data::ExperienceMetadata& expData)
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("NotifySdkStarted", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SDK_Service_NotifySdkStarted_pargs args;
  args.expData = &expData;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
}

void SDK_ServiceConcurrentClient::NotifySdkStopped()
{
  send_NotifySdkStopped();
}

void SDK_ServiceConcurrentClient::send_NotifySdkStopped()
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("NotifySdkStopped", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SDK_Service_NotifySdkStopped_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
}

void SDK_ServiceConcurrentClient::UpdateCameraActive(const std::string& cameraId, const bool active)
{
  send_UpdateCameraActive(cameraId, active);
}

void SDK_ServiceConcurrentClient::send_UpdateCameraActive(const std::string& cameraId, const bool active)
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("UpdateCameraActive", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SDK_Service_UpdateCameraActive_pargs args;
  args.cameraId = &cameraId;
  args.active = &active;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
}

void SDK_ServiceConcurrentClient::UpdateExperienceTrackedObjectMetadata(const std::vector< ::mixcast::data::TrackedObject> & trackedObjects)
{
  send_UpdateExperienceTrackedObjectMetadata(trackedObjects);
}

void SDK_ServiceConcurrentClient::send_UpdateExperienceTrackedObjectMetadata(const std::vector< ::mixcast::data::TrackedObject> & trackedObjects)
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("UpdateExperienceTrackedObjectMetadata", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SDK_Service_UpdateExperienceTrackedObjectMetadata_pargs args;
  args.trackedObjects = &trackedObjects;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
}

void SDK_ServiceConcurrentClient::SendExperienceEvent(const std::string& eventId)
{
  send_SendExperienceEvent(eventId);
}

void SDK_ServiceConcurrentClient::send_SendExperienceEvent(const std::string& eventId)
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("SendExperienceEvent", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SDK_Service_SendExperienceEvent_pargs args;
  args.eventId = &eventId;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
}

void SDK_ServiceConcurrentClient::RequestTakeSnapshot(const std::string& cameraId)
{
  send_RequestTakeSnapshot(cameraId);
}

void SDK_ServiceConcurrentClient::send_RequestTakeSnapshot(const std::string& cameraId)
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("RequestTakeSnapshot", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SDK_Service_RequestTakeSnapshot_pargs args;
  args.cameraId = &cameraId;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
}

void SDK_ServiceConcurrentClient::RequestSetVideoRecording(const std::string& cameraId, const bool enableVideoRecording)
{
  send_RequestSetVideoRecording(cameraId, enableVideoRecording);
}

void SDK_ServiceConcurrentClient::send_RequestSetVideoRecording(const std::string& cameraId, const bool enableVideoRecording)
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("RequestSetVideoRecording", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SDK_Service_RequestSetVideoRecording_pargs args;
  args.cameraId = &cameraId;
  args.enableVideoRecording = &enableVideoRecording;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
}

void SDK_ServiceConcurrentClient::RequestSetAutoSnapshot(const std::string& cameraId, const bool enableAutoSnapshot)
{
  send_RequestSetAutoSnapshot(cameraId, enableAutoSnapshot);
}

void SDK_ServiceConcurrentClient::send_RequestSetAutoSnapshot(const std::string& cameraId, const bool enableAutoSnapshot)
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("RequestSetAutoSnapshot", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SDK_Service_RequestSetAutoSnapshot_pargs args;
  args.cameraId = &cameraId;
  args.enableAutoSnapshot = &enableAutoSnapshot;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
}

void SDK_ServiceConcurrentClient::RequestSetVideoStreaming(const std::string& cameraId, const bool enableVideoStreaming)
{
  send_RequestSetVideoStreaming(cameraId, enableVideoStreaming);
}

void SDK_ServiceConcurrentClient::send_RequestSetVideoStreaming(const std::string& cameraId, const bool enableVideoStreaming)
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("RequestSetVideoStreaming", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SDK_Service_RequestSetVideoStreaming_pargs args;
  args.cameraId = &cameraId;
  args.enableVideoStreaming = &enableVideoStreaming;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
}

}} // namespace

