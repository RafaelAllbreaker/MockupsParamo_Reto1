/**
 * Autogenerated by Thrift Compiler (Shiyao Modified base on 0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ExperienceMetadata_TYPES_H
#define ExperienceMetadata_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace mixcast { namespace data {

class ExperienceMetadata;

typedef struct _ExperienceMetadata__isset {
  _ExperienceMetadata__isset() : experienceExePath(false), experienceTitle(false), organizationName(false), mixcastVersion(false), engineVersion(false), projectId(false), alphaIsPremultiplied(false), colorSpaceIsLinear(false) {}
  bool experienceExePath :1;
  bool experienceTitle :1;
  bool organizationName :1;
  bool mixcastVersion :1;
  bool engineVersion :1;
  bool projectId :1;
  bool alphaIsPremultiplied :1;
  bool colorSpaceIsLinear :1;
} _ExperienceMetadata__isset;

class ExperienceMetadata : public virtual ::apache::thrift::TBase {
 public:

  ExperienceMetadata(const ExperienceMetadata&);
  ExperienceMetadata& operator=(const ExperienceMetadata&);
  ExperienceMetadata() : experienceExePath(), experienceTitle(), organizationName(), mixcastVersion(), engineVersion(), projectId(), alphaIsPremultiplied(0), colorSpaceIsLinear(0) {
  }

  virtual ~ExperienceMetadata() throw();
  std::string experienceExePath;
  std::string experienceTitle;
  std::string organizationName;
  std::string mixcastVersion;
  std::string engineVersion;
  std::string projectId;
  bool alphaIsPremultiplied;
  bool colorSpaceIsLinear;

  _ExperienceMetadata__isset __isset;

  void __set_experienceExePath(const std::string& val);

  void __set_experienceTitle(const std::string& val);

  void __set_organizationName(const std::string& val);

  void __set_mixcastVersion(const std::string& val);

  void __set_engineVersion(const std::string& val);

  void __set_projectId(const std::string& val);

  void __set_alphaIsPremultiplied(const bool val);

  void __set_colorSpaceIsLinear(const bool val);

  bool operator == (const ExperienceMetadata & rhs) const
  {
    if (!(experienceExePath == rhs.experienceExePath))
      return false;
    if (!(experienceTitle == rhs.experienceTitle))
      return false;
    if (!(organizationName == rhs.organizationName))
      return false;
    if (!(mixcastVersion == rhs.mixcastVersion))
      return false;
    if (!(engineVersion == rhs.engineVersion))
      return false;
    if (!(projectId == rhs.projectId))
      return false;
    if (!(alphaIsPremultiplied == rhs.alphaIsPremultiplied))
      return false;
    if (!(colorSpaceIsLinear == rhs.colorSpaceIsLinear))
      return false;
    return true;
  }
  bool operator != (const ExperienceMetadata &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExperienceMetadata & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ExperienceMetadata &a, ExperienceMetadata &b);

std::ostream& operator<<(std::ostream& out, const ExperienceMetadata& obj);

}} // namespace

#endif
