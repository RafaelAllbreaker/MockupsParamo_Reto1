/**
 * Autogenerated by Thrift Compiler (Shiyao Modified base on 0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Service_SDK_H
#define Service_SDK_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Service_SDK_types.h"

namespace mixcast { namespace thrift {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class Service_SDKIf {
 public:
  virtual ~Service_SDKIf() {}
  virtual void validate_ping() = 0;
  virtual void validate_function_list(std::vector<std::string> & _return) = 0;
  virtual void SetActivationState(const bool active) = 0;
  virtual void NotifyServiceStarted() = 0;
  virtual void SendLegacyData(const std::string& dataJson) = 0;
  virtual void UpdateTrackedObjectMetadata(const std::vector< ::mixcast::data::TrackedObject> & trackedObjects) = 0;
  virtual void UpdateCameraMetadata(const std::vector< ::mixcast::data::VirtualCamera> & cameras) = 0;
  virtual void UpdateViewfinderMetadata(const std::vector< ::mixcast::data::Viewfinder> & viewfinders) = 0;
  virtual void UpdateDesktopMetadata(const  ::mixcast::data::Desktop& desktop) = 0;
  virtual void NotifyExternalTexturesUpdated(const std::vector< ::mixcast::thrift::SharedTexPacket> & textureInfo) = 0;
  virtual void ResetWorldOrientation() = 0;
  virtual void ModifyWorldOrientation(const double degrees) = 0;
  virtual void SendExperienceCommand(const std::string& cmdId) = 0;
};

class Service_SDKIfFactory {
 public:
  typedef Service_SDKIf Handler;

  virtual ~Service_SDKIfFactory() {}

  virtual Service_SDKIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(Service_SDKIf* /* handler */) = 0;
};

class Service_SDKIfSingletonFactory : virtual public Service_SDKIfFactory {
 public:
  Service_SDKIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<Service_SDKIf>& iface) : iface_(iface) {}
  virtual ~Service_SDKIfSingletonFactory() {}

  virtual Service_SDKIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(Service_SDKIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<Service_SDKIf> iface_;
};

class Service_SDKNull : virtual public Service_SDKIf {
 public:
  virtual ~Service_SDKNull() {}
  void validate_ping() {
    return;
  }
  void validate_function_list(std::vector<std::string> & /* _return */) {
    return;
  }
  void SetActivationState(const bool /* active */) {
    return;
  }
  void NotifyServiceStarted() {
    return;
  }
  void SendLegacyData(const std::string& /* dataJson */) {
    return;
  }
  void UpdateTrackedObjectMetadata(const std::vector< ::mixcast::data::TrackedObject> & /* trackedObjects */) {
    return;
  }
  void UpdateCameraMetadata(const std::vector< ::mixcast::data::VirtualCamera> & /* cameras */) {
    return;
  }
  void UpdateViewfinderMetadata(const std::vector< ::mixcast::data::Viewfinder> & /* viewfinders */) {
    return;
  }
  void UpdateDesktopMetadata(const  ::mixcast::data::Desktop& /* desktop */) {
    return;
  }
  void NotifyExternalTexturesUpdated(const std::vector< ::mixcast::thrift::SharedTexPacket> & /* textureInfo */) {
    return;
  }
  void ResetWorldOrientation() {
    return;
  }
  void ModifyWorldOrientation(const double /* degrees */) {
    return;
  }
  void SendExperienceCommand(const std::string& /* cmdId */) {
    return;
  }
};


class Service_SDK_validate_ping_args {
 public:

  Service_SDK_validate_ping_args(const Service_SDK_validate_ping_args&);
  Service_SDK_validate_ping_args& operator=(const Service_SDK_validate_ping_args&);
  Service_SDK_validate_ping_args() {
  }

  virtual ~Service_SDK_validate_ping_args() throw();

  bool operator == (const Service_SDK_validate_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Service_SDK_validate_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_SDK_validate_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_SDK_validate_ping_pargs {
 public:


  virtual ~Service_SDK_validate_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_SDK_validate_ping_result {
 public:

  Service_SDK_validate_ping_result(const Service_SDK_validate_ping_result&);
  Service_SDK_validate_ping_result& operator=(const Service_SDK_validate_ping_result&);
  Service_SDK_validate_ping_result() {
  }

  virtual ~Service_SDK_validate_ping_result() throw();

  bool operator == (const Service_SDK_validate_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Service_SDK_validate_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_SDK_validate_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_SDK_validate_ping_presult {
 public:


  virtual ~Service_SDK_validate_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Service_SDK_validate_function_list_args {
 public:

  Service_SDK_validate_function_list_args(const Service_SDK_validate_function_list_args&);
  Service_SDK_validate_function_list_args& operator=(const Service_SDK_validate_function_list_args&);
  Service_SDK_validate_function_list_args() {
  }

  virtual ~Service_SDK_validate_function_list_args() throw();

  bool operator == (const Service_SDK_validate_function_list_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Service_SDK_validate_function_list_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_SDK_validate_function_list_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_SDK_validate_function_list_pargs {
 public:


  virtual ~Service_SDK_validate_function_list_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_SDK_validate_function_list_result__isset {
  _Service_SDK_validate_function_list_result__isset() : success(false) {}
  bool success :1;
} _Service_SDK_validate_function_list_result__isset;

class Service_SDK_validate_function_list_result {
 public:

  Service_SDK_validate_function_list_result(const Service_SDK_validate_function_list_result&);
  Service_SDK_validate_function_list_result& operator=(const Service_SDK_validate_function_list_result&);
  Service_SDK_validate_function_list_result() {
  }

  virtual ~Service_SDK_validate_function_list_result() throw();
  std::vector<std::string>  success;

  _Service_SDK_validate_function_list_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const Service_SDK_validate_function_list_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Service_SDK_validate_function_list_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_SDK_validate_function_list_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_SDK_validate_function_list_presult__isset {
  _Service_SDK_validate_function_list_presult__isset() : success(false) {}
  bool success :1;
} _Service_SDK_validate_function_list_presult__isset;

class Service_SDK_validate_function_list_presult {
 public:


  virtual ~Service_SDK_validate_function_list_presult() throw();
  std::vector<std::string> * success;

  _Service_SDK_validate_function_list_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_SDK_SetActivationState_args__isset {
  _Service_SDK_SetActivationState_args__isset() : active(false) {}
  bool active :1;
} _Service_SDK_SetActivationState_args__isset;

class Service_SDK_SetActivationState_args {
 public:

  Service_SDK_SetActivationState_args(const Service_SDK_SetActivationState_args&);
  Service_SDK_SetActivationState_args& operator=(const Service_SDK_SetActivationState_args&);
  Service_SDK_SetActivationState_args() : active(0) {
  }

  virtual ~Service_SDK_SetActivationState_args() throw();
  bool active;

  _Service_SDK_SetActivationState_args__isset __isset;

  void __set_active(const bool val);

  bool operator == (const Service_SDK_SetActivationState_args & rhs) const
  {
    if (!(active == rhs.active))
      return false;
    return true;
  }
  bool operator != (const Service_SDK_SetActivationState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_SDK_SetActivationState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_SDK_SetActivationState_pargs {
 public:


  virtual ~Service_SDK_SetActivationState_pargs() throw();
  const bool* active;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_SDK_NotifyServiceStarted_args {
 public:

  Service_SDK_NotifyServiceStarted_args(const Service_SDK_NotifyServiceStarted_args&);
  Service_SDK_NotifyServiceStarted_args& operator=(const Service_SDK_NotifyServiceStarted_args&);
  Service_SDK_NotifyServiceStarted_args() {
  }

  virtual ~Service_SDK_NotifyServiceStarted_args() throw();

  bool operator == (const Service_SDK_NotifyServiceStarted_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Service_SDK_NotifyServiceStarted_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_SDK_NotifyServiceStarted_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_SDK_NotifyServiceStarted_pargs {
 public:


  virtual ~Service_SDK_NotifyServiceStarted_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_SDK_SendLegacyData_args__isset {
  _Service_SDK_SendLegacyData_args__isset() : dataJson(false) {}
  bool dataJson :1;
} _Service_SDK_SendLegacyData_args__isset;

class Service_SDK_SendLegacyData_args {
 public:

  Service_SDK_SendLegacyData_args(const Service_SDK_SendLegacyData_args&);
  Service_SDK_SendLegacyData_args& operator=(const Service_SDK_SendLegacyData_args&);
  Service_SDK_SendLegacyData_args() : dataJson() {
  }

  virtual ~Service_SDK_SendLegacyData_args() throw();
  std::string dataJson;

  _Service_SDK_SendLegacyData_args__isset __isset;

  void __set_dataJson(const std::string& val);

  bool operator == (const Service_SDK_SendLegacyData_args & rhs) const
  {
    if (!(dataJson == rhs.dataJson))
      return false;
    return true;
  }
  bool operator != (const Service_SDK_SendLegacyData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_SDK_SendLegacyData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_SDK_SendLegacyData_pargs {
 public:


  virtual ~Service_SDK_SendLegacyData_pargs() throw();
  const std::string* dataJson;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_SDK_UpdateTrackedObjectMetadata_args__isset {
  _Service_SDK_UpdateTrackedObjectMetadata_args__isset() : trackedObjects(false) {}
  bool trackedObjects :1;
} _Service_SDK_UpdateTrackedObjectMetadata_args__isset;

class Service_SDK_UpdateTrackedObjectMetadata_args {
 public:

  Service_SDK_UpdateTrackedObjectMetadata_args(const Service_SDK_UpdateTrackedObjectMetadata_args&);
  Service_SDK_UpdateTrackedObjectMetadata_args& operator=(const Service_SDK_UpdateTrackedObjectMetadata_args&);
  Service_SDK_UpdateTrackedObjectMetadata_args() {
  }

  virtual ~Service_SDK_UpdateTrackedObjectMetadata_args() throw();
  std::vector< ::mixcast::data::TrackedObject>  trackedObjects;

  _Service_SDK_UpdateTrackedObjectMetadata_args__isset __isset;

  void __set_trackedObjects(const std::vector< ::mixcast::data::TrackedObject> & val);

  bool operator == (const Service_SDK_UpdateTrackedObjectMetadata_args & rhs) const
  {
    if (!(trackedObjects == rhs.trackedObjects))
      return false;
    return true;
  }
  bool operator != (const Service_SDK_UpdateTrackedObjectMetadata_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_SDK_UpdateTrackedObjectMetadata_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_SDK_UpdateTrackedObjectMetadata_pargs {
 public:


  virtual ~Service_SDK_UpdateTrackedObjectMetadata_pargs() throw();
  const std::vector< ::mixcast::data::TrackedObject> * trackedObjects;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_SDK_UpdateCameraMetadata_args__isset {
  _Service_SDK_UpdateCameraMetadata_args__isset() : cameras(false) {}
  bool cameras :1;
} _Service_SDK_UpdateCameraMetadata_args__isset;

class Service_SDK_UpdateCameraMetadata_args {
 public:

  Service_SDK_UpdateCameraMetadata_args(const Service_SDK_UpdateCameraMetadata_args&);
  Service_SDK_UpdateCameraMetadata_args& operator=(const Service_SDK_UpdateCameraMetadata_args&);
  Service_SDK_UpdateCameraMetadata_args() {
  }

  virtual ~Service_SDK_UpdateCameraMetadata_args() throw();
  std::vector< ::mixcast::data::VirtualCamera>  cameras;

  _Service_SDK_UpdateCameraMetadata_args__isset __isset;

  void __set_cameras(const std::vector< ::mixcast::data::VirtualCamera> & val);

  bool operator == (const Service_SDK_UpdateCameraMetadata_args & rhs) const
  {
    if (!(cameras == rhs.cameras))
      return false;
    return true;
  }
  bool operator != (const Service_SDK_UpdateCameraMetadata_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_SDK_UpdateCameraMetadata_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_SDK_UpdateCameraMetadata_pargs {
 public:


  virtual ~Service_SDK_UpdateCameraMetadata_pargs() throw();
  const std::vector< ::mixcast::data::VirtualCamera> * cameras;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_SDK_UpdateViewfinderMetadata_args__isset {
  _Service_SDK_UpdateViewfinderMetadata_args__isset() : viewfinders(false) {}
  bool viewfinders :1;
} _Service_SDK_UpdateViewfinderMetadata_args__isset;

class Service_SDK_UpdateViewfinderMetadata_args {
 public:

  Service_SDK_UpdateViewfinderMetadata_args(const Service_SDK_UpdateViewfinderMetadata_args&);
  Service_SDK_UpdateViewfinderMetadata_args& operator=(const Service_SDK_UpdateViewfinderMetadata_args&);
  Service_SDK_UpdateViewfinderMetadata_args() {
  }

  virtual ~Service_SDK_UpdateViewfinderMetadata_args() throw();
  std::vector< ::mixcast::data::Viewfinder>  viewfinders;

  _Service_SDK_UpdateViewfinderMetadata_args__isset __isset;

  void __set_viewfinders(const std::vector< ::mixcast::data::Viewfinder> & val);

  bool operator == (const Service_SDK_UpdateViewfinderMetadata_args & rhs) const
  {
    if (!(viewfinders == rhs.viewfinders))
      return false;
    return true;
  }
  bool operator != (const Service_SDK_UpdateViewfinderMetadata_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_SDK_UpdateViewfinderMetadata_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_SDK_UpdateViewfinderMetadata_pargs {
 public:


  virtual ~Service_SDK_UpdateViewfinderMetadata_pargs() throw();
  const std::vector< ::mixcast::data::Viewfinder> * viewfinders;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_SDK_UpdateDesktopMetadata_args__isset {
  _Service_SDK_UpdateDesktopMetadata_args__isset() : desktop(false) {}
  bool desktop :1;
} _Service_SDK_UpdateDesktopMetadata_args__isset;

class Service_SDK_UpdateDesktopMetadata_args {
 public:

  Service_SDK_UpdateDesktopMetadata_args(const Service_SDK_UpdateDesktopMetadata_args&);
  Service_SDK_UpdateDesktopMetadata_args& operator=(const Service_SDK_UpdateDesktopMetadata_args&);
  Service_SDK_UpdateDesktopMetadata_args() {
  }

  virtual ~Service_SDK_UpdateDesktopMetadata_args() throw();
   ::mixcast::data::Desktop desktop;

  _Service_SDK_UpdateDesktopMetadata_args__isset __isset;

  void __set_desktop(const  ::mixcast::data::Desktop& val);

  bool operator == (const Service_SDK_UpdateDesktopMetadata_args & rhs) const
  {
    if (!(desktop == rhs.desktop))
      return false;
    return true;
  }
  bool operator != (const Service_SDK_UpdateDesktopMetadata_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_SDK_UpdateDesktopMetadata_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_SDK_UpdateDesktopMetadata_pargs {
 public:


  virtual ~Service_SDK_UpdateDesktopMetadata_pargs() throw();
  const  ::mixcast::data::Desktop* desktop;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_SDK_NotifyExternalTexturesUpdated_args__isset {
  _Service_SDK_NotifyExternalTexturesUpdated_args__isset() : textureInfo(false) {}
  bool textureInfo :1;
} _Service_SDK_NotifyExternalTexturesUpdated_args__isset;

class Service_SDK_NotifyExternalTexturesUpdated_args {
 public:

  Service_SDK_NotifyExternalTexturesUpdated_args(const Service_SDK_NotifyExternalTexturesUpdated_args&);
  Service_SDK_NotifyExternalTexturesUpdated_args& operator=(const Service_SDK_NotifyExternalTexturesUpdated_args&);
  Service_SDK_NotifyExternalTexturesUpdated_args() {
  }

  virtual ~Service_SDK_NotifyExternalTexturesUpdated_args() throw();
  std::vector< ::mixcast::thrift::SharedTexPacket>  textureInfo;

  _Service_SDK_NotifyExternalTexturesUpdated_args__isset __isset;

  void __set_textureInfo(const std::vector< ::mixcast::thrift::SharedTexPacket> & val);

  bool operator == (const Service_SDK_NotifyExternalTexturesUpdated_args & rhs) const
  {
    if (!(textureInfo == rhs.textureInfo))
      return false;
    return true;
  }
  bool operator != (const Service_SDK_NotifyExternalTexturesUpdated_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_SDK_NotifyExternalTexturesUpdated_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_SDK_NotifyExternalTexturesUpdated_pargs {
 public:


  virtual ~Service_SDK_NotifyExternalTexturesUpdated_pargs() throw();
  const std::vector< ::mixcast::thrift::SharedTexPacket> * textureInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_SDK_ResetWorldOrientation_args {
 public:

  Service_SDK_ResetWorldOrientation_args(const Service_SDK_ResetWorldOrientation_args&);
  Service_SDK_ResetWorldOrientation_args& operator=(const Service_SDK_ResetWorldOrientation_args&);
  Service_SDK_ResetWorldOrientation_args() {
  }

  virtual ~Service_SDK_ResetWorldOrientation_args() throw();

  bool operator == (const Service_SDK_ResetWorldOrientation_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Service_SDK_ResetWorldOrientation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_SDK_ResetWorldOrientation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_SDK_ResetWorldOrientation_pargs {
 public:


  virtual ~Service_SDK_ResetWorldOrientation_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_SDK_ModifyWorldOrientation_args__isset {
  _Service_SDK_ModifyWorldOrientation_args__isset() : degrees(false) {}
  bool degrees :1;
} _Service_SDK_ModifyWorldOrientation_args__isset;

class Service_SDK_ModifyWorldOrientation_args {
 public:

  Service_SDK_ModifyWorldOrientation_args(const Service_SDK_ModifyWorldOrientation_args&);
  Service_SDK_ModifyWorldOrientation_args& operator=(const Service_SDK_ModifyWorldOrientation_args&);
  Service_SDK_ModifyWorldOrientation_args() : degrees(0) {
  }

  virtual ~Service_SDK_ModifyWorldOrientation_args() throw();
  double degrees;

  _Service_SDK_ModifyWorldOrientation_args__isset __isset;

  void __set_degrees(const double val);

  bool operator == (const Service_SDK_ModifyWorldOrientation_args & rhs) const
  {
    if (!(degrees == rhs.degrees))
      return false;
    return true;
  }
  bool operator != (const Service_SDK_ModifyWorldOrientation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_SDK_ModifyWorldOrientation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_SDK_ModifyWorldOrientation_pargs {
 public:


  virtual ~Service_SDK_ModifyWorldOrientation_pargs() throw();
  const double* degrees;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_SDK_SendExperienceCommand_args__isset {
  _Service_SDK_SendExperienceCommand_args__isset() : cmdId(false) {}
  bool cmdId :1;
} _Service_SDK_SendExperienceCommand_args__isset;

class Service_SDK_SendExperienceCommand_args {
 public:

  Service_SDK_SendExperienceCommand_args(const Service_SDK_SendExperienceCommand_args&);
  Service_SDK_SendExperienceCommand_args& operator=(const Service_SDK_SendExperienceCommand_args&);
  Service_SDK_SendExperienceCommand_args() : cmdId() {
  }

  virtual ~Service_SDK_SendExperienceCommand_args() throw();
  std::string cmdId;

  _Service_SDK_SendExperienceCommand_args__isset __isset;

  void __set_cmdId(const std::string& val);

  bool operator == (const Service_SDK_SendExperienceCommand_args & rhs) const
  {
    if (!(cmdId == rhs.cmdId))
      return false;
    return true;
  }
  bool operator != (const Service_SDK_SendExperienceCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_SDK_SendExperienceCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_SDK_SendExperienceCommand_pargs {
 public:


  virtual ~Service_SDK_SendExperienceCommand_pargs() throw();
  const std::string* cmdId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Service_SDKClient : virtual public Service_SDKIf {
 public:
  Service_SDKClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  Service_SDKClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void validate_ping();
  void send_validate_ping();
  void recv_validate_ping();
  void validate_function_list(std::vector<std::string> & _return);
  void send_validate_function_list();
  void recv_validate_function_list(std::vector<std::string> & _return);
  void SetActivationState(const bool active);
  void send_SetActivationState(const bool active);
  void NotifyServiceStarted();
  void send_NotifyServiceStarted();
  void SendLegacyData(const std::string& dataJson);
  void send_SendLegacyData(const std::string& dataJson);
  void UpdateTrackedObjectMetadata(const std::vector< ::mixcast::data::TrackedObject> & trackedObjects);
  void send_UpdateTrackedObjectMetadata(const std::vector< ::mixcast::data::TrackedObject> & trackedObjects);
  void UpdateCameraMetadata(const std::vector< ::mixcast::data::VirtualCamera> & cameras);
  void send_UpdateCameraMetadata(const std::vector< ::mixcast::data::VirtualCamera> & cameras);
  void UpdateViewfinderMetadata(const std::vector< ::mixcast::data::Viewfinder> & viewfinders);
  void send_UpdateViewfinderMetadata(const std::vector< ::mixcast::data::Viewfinder> & viewfinders);
  void UpdateDesktopMetadata(const  ::mixcast::data::Desktop& desktop);
  void send_UpdateDesktopMetadata(const  ::mixcast::data::Desktop& desktop);
  void NotifyExternalTexturesUpdated(const std::vector< ::mixcast::thrift::SharedTexPacket> & textureInfo);
  void send_NotifyExternalTexturesUpdated(const std::vector< ::mixcast::thrift::SharedTexPacket> & textureInfo);
  void ResetWorldOrientation();
  void send_ResetWorldOrientation();
  void ModifyWorldOrientation(const double degrees);
  void send_ModifyWorldOrientation(const double degrees);
  void SendExperienceCommand(const std::string& cmdId);
  void send_SendExperienceCommand(const std::string& cmdId);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class Service_SDKProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<Service_SDKIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (Service_SDKProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_validate_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_validate_function_list(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetActivationState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_NotifyServiceStarted(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SendLegacyData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateTrackedObjectMetadata(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateCameraMetadata(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateViewfinderMetadata(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateDesktopMetadata(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_NotifyExternalTexturesUpdated(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ResetWorldOrientation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ModifyWorldOrientation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SendExperienceCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  Service_SDKProcessor(::apache::thrift::stdcxx::shared_ptr<Service_SDKIf> iface) :
    iface_(iface) {
    processMap_["validate_ping"] = &Service_SDKProcessor::process_validate_ping;
    processMap_["validate_function_list"] = &Service_SDKProcessor::process_validate_function_list;
    processMap_["SetActivationState"] = &Service_SDKProcessor::process_SetActivationState;
    processMap_["NotifyServiceStarted"] = &Service_SDKProcessor::process_NotifyServiceStarted;
    processMap_["SendLegacyData"] = &Service_SDKProcessor::process_SendLegacyData;
    processMap_["UpdateTrackedObjectMetadata"] = &Service_SDKProcessor::process_UpdateTrackedObjectMetadata;
    processMap_["UpdateCameraMetadata"] = &Service_SDKProcessor::process_UpdateCameraMetadata;
    processMap_["UpdateViewfinderMetadata"] = &Service_SDKProcessor::process_UpdateViewfinderMetadata;
    processMap_["UpdateDesktopMetadata"] = &Service_SDKProcessor::process_UpdateDesktopMetadata;
    processMap_["NotifyExternalTexturesUpdated"] = &Service_SDKProcessor::process_NotifyExternalTexturesUpdated;
    processMap_["ResetWorldOrientation"] = &Service_SDKProcessor::process_ResetWorldOrientation;
    processMap_["ModifyWorldOrientation"] = &Service_SDKProcessor::process_ModifyWorldOrientation;
    processMap_["SendExperienceCommand"] = &Service_SDKProcessor::process_SendExperienceCommand;
  }

  virtual ~Service_SDKProcessor() {}
};

class Service_SDKProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  Service_SDKProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< Service_SDKIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< Service_SDKIfFactory > handlerFactory_;
};

class Service_SDKMultiface : virtual public Service_SDKIf {
 public:
  Service_SDKMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<Service_SDKIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~Service_SDKMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<Service_SDKIf> > ifaces_;
  Service_SDKMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<Service_SDKIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void validate_ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->validate_ping();
    }
    ifaces_[i]->validate_ping();
  }

  void validate_function_list(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->validate_function_list(_return);
    }
    ifaces_[i]->validate_function_list(_return);
    return;
  }

  void SetActivationState(const bool active) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetActivationState(active);
    }
    ifaces_[i]->SetActivationState(active);
  }

  void NotifyServiceStarted() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->NotifyServiceStarted();
    }
    ifaces_[i]->NotifyServiceStarted();
  }

  void SendLegacyData(const std::string& dataJson) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SendLegacyData(dataJson);
    }
    ifaces_[i]->SendLegacyData(dataJson);
  }

  void UpdateTrackedObjectMetadata(const std::vector< ::mixcast::data::TrackedObject> & trackedObjects) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateTrackedObjectMetadata(trackedObjects);
    }
    ifaces_[i]->UpdateTrackedObjectMetadata(trackedObjects);
  }

  void UpdateCameraMetadata(const std::vector< ::mixcast::data::VirtualCamera> & cameras) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateCameraMetadata(cameras);
    }
    ifaces_[i]->UpdateCameraMetadata(cameras);
  }

  void UpdateViewfinderMetadata(const std::vector< ::mixcast::data::Viewfinder> & viewfinders) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateViewfinderMetadata(viewfinders);
    }
    ifaces_[i]->UpdateViewfinderMetadata(viewfinders);
  }

  void UpdateDesktopMetadata(const  ::mixcast::data::Desktop& desktop) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateDesktopMetadata(desktop);
    }
    ifaces_[i]->UpdateDesktopMetadata(desktop);
  }

  void NotifyExternalTexturesUpdated(const std::vector< ::mixcast::thrift::SharedTexPacket> & textureInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->NotifyExternalTexturesUpdated(textureInfo);
    }
    ifaces_[i]->NotifyExternalTexturesUpdated(textureInfo);
  }

  void ResetWorldOrientation() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ResetWorldOrientation();
    }
    ifaces_[i]->ResetWorldOrientation();
  }

  void ModifyWorldOrientation(const double degrees) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ModifyWorldOrientation(degrees);
    }
    ifaces_[i]->ModifyWorldOrientation(degrees);
  }

  void SendExperienceCommand(const std::string& cmdId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SendExperienceCommand(cmdId);
    }
    ifaces_[i]->SendExperienceCommand(cmdId);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class Service_SDKConcurrentClient : virtual public Service_SDKIf {
 public:
  Service_SDKConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  Service_SDKConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void validate_ping();
  int32_t send_validate_ping();
  void recv_validate_ping(const int32_t seqid);
  void validate_function_list(std::vector<std::string> & _return);
  int32_t send_validate_function_list();
  void recv_validate_function_list(std::vector<std::string> & _return, const int32_t seqid);
  void SetActivationState(const bool active);
  void send_SetActivationState(const bool active);
  void NotifyServiceStarted();
  void send_NotifyServiceStarted();
  void SendLegacyData(const std::string& dataJson);
  void send_SendLegacyData(const std::string& dataJson);
  void UpdateTrackedObjectMetadata(const std::vector< ::mixcast::data::TrackedObject> & trackedObjects);
  void send_UpdateTrackedObjectMetadata(const std::vector< ::mixcast::data::TrackedObject> & trackedObjects);
  void UpdateCameraMetadata(const std::vector< ::mixcast::data::VirtualCamera> & cameras);
  void send_UpdateCameraMetadata(const std::vector< ::mixcast::data::VirtualCamera> & cameras);
  void UpdateViewfinderMetadata(const std::vector< ::mixcast::data::Viewfinder> & viewfinders);
  void send_UpdateViewfinderMetadata(const std::vector< ::mixcast::data::Viewfinder> & viewfinders);
  void UpdateDesktopMetadata(const  ::mixcast::data::Desktop& desktop);
  void send_UpdateDesktopMetadata(const  ::mixcast::data::Desktop& desktop);
  void NotifyExternalTexturesUpdated(const std::vector< ::mixcast::thrift::SharedTexPacket> & textureInfo);
  void send_NotifyExternalTexturesUpdated(const std::vector< ::mixcast::thrift::SharedTexPacket> & textureInfo);
  void ResetWorldOrientation();
  void send_ResetWorldOrientation();
  void ModifyWorldOrientation(const double degrees);
  void send_ModifyWorldOrientation(const double degrees);
  void SendExperienceCommand(const std::string& cmdId);
  void send_SendExperienceCommand(const std::string& cmdId);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
