/**
 * Autogenerated by Thrift Compiler (Shiyao Modified base on 0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Desktop_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace mixcast { namespace data {


Desktop::~Desktop() throw() {
}


void Desktop::__set_hideMixCastOutput(const bool val) {
  this->hideMixCastOutput = val;
}

void Desktop::__set_maxDisplayingCameras(const int32_t val) {
  this->maxDisplayingCameras = val;
}

void Desktop::__set_displayingCameraIds(const std::vector<std::string> & val) {
  this->displayingCameraIds = val;
}

void Desktop::__set_hideMixCastUI(const bool val) {
  this->hideMixCastUI = val;
}

void Desktop::__set_uiZoomFactor(const double val) {
  this->uiZoomFactor = val;
}
std::ostream& operator<<(std::ostream& out, const Desktop& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Desktop::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hideMixCastOutput);
          this->__isset.hideMixCastOutput = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxDisplayingCameras);
          this->__isset.maxDisplayingCameras = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->displayingCameraIds.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->displayingCameraIds.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->displayingCameraIds[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.displayingCameraIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hideMixCastUI);
          this->__isset.hideMixCastUI = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->uiZoomFactor);
          this->__isset.uiZoomFactor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Desktop::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Desktop");

  xfer += oprot->writeFieldBegin("hideMixCastOutput", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->hideMixCastOutput);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxDisplayingCameras", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->maxDisplayingCameras);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayingCameraIds", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->displayingCameraIds.size()));
    std::vector<std::string> ::const_iterator _iter5;
    for (_iter5 = this->displayingCameraIds.begin(); _iter5 != this->displayingCameraIds.end(); ++_iter5)
    {
      xfer += oprot->writeString((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hideMixCastUI", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->hideMixCastUI);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uiZoomFactor", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->uiZoomFactor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Desktop &a, Desktop &b) {
  using ::std::swap;
  swap(a.hideMixCastOutput, b.hideMixCastOutput);
  swap(a.maxDisplayingCameras, b.maxDisplayingCameras);
  swap(a.displayingCameraIds, b.displayingCameraIds);
  swap(a.hideMixCastUI, b.hideMixCastUI);
  swap(a.uiZoomFactor, b.uiZoomFactor);
  swap(a.__isset, b.__isset);
}

Desktop::Desktop(const Desktop& other6) {
  hideMixCastOutput = other6.hideMixCastOutput;
  maxDisplayingCameras = other6.maxDisplayingCameras;
  displayingCameraIds = other6.displayingCameraIds;
  hideMixCastUI = other6.hideMixCastUI;
  uiZoomFactor = other6.uiZoomFactor;
  __isset = other6.__isset;
}
Desktop& Desktop::operator=(const Desktop& other7) {
  hideMixCastOutput = other7.hideMixCastOutput;
  maxDisplayingCameras = other7.maxDisplayingCameras;
  displayingCameraIds = other7.displayingCameraIds;
  hideMixCastUI = other7.hideMixCastUI;
  uiZoomFactor = other7.uiZoomFactor;
  __isset = other7.__isset;
  return *this;
}
void Desktop::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Desktop(";
  out << "hideMixCastOutput=" << to_string(hideMixCastOutput);
  out << ", " << "maxDisplayingCameras=" << to_string(maxDisplayingCameras);
  out << ", " << "displayingCameraIds=" << to_string(displayingCameraIds);
  out << ", " << "hideMixCastUI=" << to_string(hideMixCastUI);
  out << ", " << "uiZoomFactor=" << to_string(uiZoomFactor);
  out << ")";
}

}} // namespace
