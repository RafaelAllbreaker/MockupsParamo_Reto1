/**
 * Autogenerated by Thrift Compiler (Shiyao Modified base on 0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "SharedTex_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace mixcast { namespace thrift {


SharedTex::~SharedTex() throw() {
}


void SharedTex::__set_handle(const int64_t val) {
  this->handle = val;
}

void SharedTex::__set_width(const int32_t val) {
  this->width = val;
}

void SharedTex::__set_height(const int32_t val) {
  this->height = val;
}

void SharedTex::__set_format(const int32_t val) {
  this->format = val;
}
std::ostream& operator<<(std::ostream& out, const SharedTex& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SharedTex::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_handle = false;
  bool isset_width = false;
  bool isset_height = false;
  bool isset_format = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->handle);
          isset_handle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->width);
          isset_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->height);
          isset_height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->format);
          isset_format = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_handle)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_width)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_height)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_format)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SharedTex::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SharedTex");

  xfer += oprot->writeFieldBegin("handle", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->handle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("format", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->format);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SharedTex &a, SharedTex &b) {
  using ::std::swap;
  swap(a.handle, b.handle);
  swap(a.width, b.width);
  swap(a.height, b.height);
  swap(a.format, b.format);
}

SharedTex::SharedTex(const SharedTex& other0) {
  handle = other0.handle;
  width = other0.width;
  height = other0.height;
  format = other0.format;
}
SharedTex& SharedTex::operator=(const SharedTex& other1) {
  handle = other1.handle;
  width = other1.width;
  height = other1.height;
  format = other1.format;
  return *this;
}
void SharedTex::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SharedTex(";
  out << "handle=" << to_string(handle);
  out << ", " << "width=" << to_string(width);
  out << ", " << "height=" << to_string(height);
  out << ", " << "format=" << to_string(format);
  out << ")";
}


SharedTexPacket::~SharedTexPacket() throw() {
}


void SharedTexPacket::__set_id(const std::string& val) {
  this->id = val;
}

void SharedTexPacket::__set_info(const SharedTex& val) {
  this->info = val;
}
std::ostream& operator<<(std::ostream& out, const SharedTexPacket& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SharedTexPacket::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_info = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->info.read(iprot);
          isset_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_info)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SharedTexPacket::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SharedTexPacket");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SharedTexPacket &a, SharedTexPacket &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.info, b.info);
}

SharedTexPacket::SharedTexPacket(const SharedTexPacket& other2) {
  id = other2.id;
  info = other2.info;
}
SharedTexPacket& SharedTexPacket::operator=(const SharedTexPacket& other3) {
  id = other3.id;
  info = other3.info;
  return *this;
}
void SharedTexPacket::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SharedTexPacket(";
  out << "id=" << to_string(id);
  out << ", " << "info=" << to_string(info);
  out << ")";
}

}} // namespace
