/**
 * Autogenerated by Thrift Compiler (Shiyao Modified base on 0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Math_TYPES_H
#define Math_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace mixcast { namespace thrift {

class Quaternion;

class Vector3;

class Pose;


class Quaternion : public virtual ::apache::thrift::TBase {
 public:

  Quaternion(const Quaternion&);
  Quaternion& operator=(const Quaternion&);
  Quaternion() : w(0), x(0), y(0), z(0) {
  }

  virtual ~Quaternion() throw();
  double w;
  double x;
  double y;
  double z;

  void __set_w(const double val);

  void __set_x(const double val);

  void __set_y(const double val);

  void __set_z(const double val);

  bool operator == (const Quaternion & rhs) const
  {
    if (!(w == rhs.w))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    return true;
  }
  bool operator != (const Quaternion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Quaternion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Quaternion &a, Quaternion &b);

std::ostream& operator<<(std::ostream& out, const Quaternion& obj);


class Vector3 : public virtual ::apache::thrift::TBase {
 public:

  Vector3(const Vector3&);
  Vector3& operator=(const Vector3&);
  Vector3() : x(0), y(0), z(0) {
  }

  virtual ~Vector3() throw();
  double x;
  double y;
  double z;

  void __set_x(const double val);

  void __set_y(const double val);

  void __set_z(const double val);

  bool operator == (const Vector3 & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    return true;
  }
  bool operator != (const Vector3 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Vector3 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Vector3 &a, Vector3 &b);

std::ostream& operator<<(std::ostream& out, const Vector3& obj);


class Pose : public virtual ::apache::thrift::TBase {
 public:

  Pose(const Pose&);
  Pose& operator=(const Pose&);
  Pose() {
  }

  virtual ~Pose() throw();
  Vector3 position;
  Quaternion rotation;

  void __set_position(const Vector3& val);

  void __set_rotation(const Quaternion& val);

  bool operator == (const Pose & rhs) const
  {
    if (!(position == rhs.position))
      return false;
    if (!(rotation == rhs.rotation))
      return false;
    return true;
  }
  bool operator != (const Pose &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pose & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Pose &a, Pose &b);

std::ostream& operator<<(std::ostream& out, const Pose& obj);

}} // namespace

#endif
