/**
 * Autogenerated by Thrift Compiler (Shiyao Modified base on 0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SharedTex_TYPES_H
#define SharedTex_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace mixcast { namespace thrift {

class SharedTex;

class SharedTexPacket;


class SharedTex : public virtual ::apache::thrift::TBase {
 public:

  SharedTex(const SharedTex&);
  SharedTex& operator=(const SharedTex&);
  SharedTex() : handle(0), width(0), height(0), format(0) {
  }

  virtual ~SharedTex() throw();
  int64_t handle;
  int32_t width;
  int32_t height;
  int32_t format;

  void __set_handle(const int64_t val);

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  void __set_format(const int32_t val);

  bool operator == (const SharedTex & rhs) const
  {
    if (!(handle == rhs.handle))
      return false;
    if (!(width == rhs.width))
      return false;
    if (!(height == rhs.height))
      return false;
    if (!(format == rhs.format))
      return false;
    return true;
  }
  bool operator != (const SharedTex &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedTex & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SharedTex &a, SharedTex &b);

std::ostream& operator<<(std::ostream& out, const SharedTex& obj);


class SharedTexPacket : public virtual ::apache::thrift::TBase {
 public:

  SharedTexPacket(const SharedTexPacket&);
  SharedTexPacket& operator=(const SharedTexPacket&);
  SharedTexPacket() : id() {
  }

  virtual ~SharedTexPacket() throw();
  std::string id;
  SharedTex info;

  void __set_id(const std::string& val);

  void __set_info(const SharedTex& val);

  bool operator == (const SharedTexPacket & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const SharedTexPacket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedTexPacket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SharedTexPacket &a, SharedTexPacket &b);

std::ostream& operator<<(std::ostream& out, const SharedTexPacket& obj);

}} // namespace

#endif
