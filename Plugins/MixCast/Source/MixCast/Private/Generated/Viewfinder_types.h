/**
 * Autogenerated by Thrift Compiler (Shiyao Modified base on 0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Viewfinder_TYPES_H
#define Viewfinder_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "Math_types.h"


namespace mixcast { namespace data {

class Viewfinder;

typedef struct _Viewfinder__isset {
  _Viewfinder__isset() : currentPosition(false), currentRotation(false), currentScale(false) {}
  bool currentPosition :1;
  bool currentRotation :1;
  bool currentScale :1;
} _Viewfinder__isset;

class Viewfinder : public virtual ::apache::thrift::TBase {
 public:

  Viewfinder(const Viewfinder&);
  Viewfinder& operator=(const Viewfinder&);
  Viewfinder() : cameraId() {
  }

  virtual ~Viewfinder() throw();
  std::string cameraId;
   ::mixcast::thrift::Vector3 currentPosition;
   ::mixcast::thrift::Quaternion currentRotation;
   ::mixcast::thrift::Vector3 currentScale;

  _Viewfinder__isset __isset;

  void __set_cameraId(const std::string& val);

  void __set_currentPosition(const  ::mixcast::thrift::Vector3& val);

  void __set_currentRotation(const  ::mixcast::thrift::Quaternion& val);

  void __set_currentScale(const  ::mixcast::thrift::Vector3& val);

  bool operator == (const Viewfinder & rhs) const
  {
    if (!(cameraId == rhs.cameraId))
      return false;
    if (!(currentPosition == rhs.currentPosition))
      return false;
    if (!(currentRotation == rhs.currentRotation))
      return false;
    if (!(currentScale == rhs.currentScale))
      return false;
    return true;
  }
  bool operator != (const Viewfinder &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Viewfinder & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Viewfinder &a, Viewfinder &b);

std::ostream& operator<<(std::ostream& out, const Viewfinder& obj);

}} // namespace

#endif
