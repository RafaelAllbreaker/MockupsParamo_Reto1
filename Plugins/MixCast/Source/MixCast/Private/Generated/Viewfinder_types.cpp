/**
 * Autogenerated by Thrift Compiler (Shiyao Modified base on 0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Viewfinder_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace mixcast { namespace data {


Viewfinder::~Viewfinder() throw() {
}


void Viewfinder::__set_cameraId(const std::string& val) {
  this->cameraId = val;
}

void Viewfinder::__set_currentPosition(const  ::mixcast::thrift::Vector3& val) {
  this->currentPosition = val;
}

void Viewfinder::__set_currentRotation(const  ::mixcast::thrift::Quaternion& val) {
  this->currentRotation = val;
}

void Viewfinder::__set_currentScale(const  ::mixcast::thrift::Vector3& val) {
  this->currentScale = val;
}
std::ostream& operator<<(std::ostream& out, const Viewfinder& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Viewfinder::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_cameraId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cameraId);
          isset_cameraId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->currentPosition.read(iprot);
          this->__isset.currentPosition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->currentRotation.read(iprot);
          this->__isset.currentRotation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->currentScale.read(iprot);
          this->__isset.currentScale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_cameraId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Viewfinder::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Viewfinder");

  xfer += oprot->writeFieldBegin("cameraId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->cameraId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currentPosition", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->currentPosition.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currentRotation", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->currentRotation.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currentScale", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->currentScale.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Viewfinder &a, Viewfinder &b) {
  using ::std::swap;
  swap(a.cameraId, b.cameraId);
  swap(a.currentPosition, b.currentPosition);
  swap(a.currentRotation, b.currentRotation);
  swap(a.currentScale, b.currentScale);
  swap(a.__isset, b.__isset);
}

Viewfinder::Viewfinder(const Viewfinder& other0) {
  cameraId = other0.cameraId;
  currentPosition = other0.currentPosition;
  currentRotation = other0.currentRotation;
  currentScale = other0.currentScale;
  __isset = other0.__isset;
}
Viewfinder& Viewfinder::operator=(const Viewfinder& other1) {
  cameraId = other1.cameraId;
  currentPosition = other1.currentPosition;
  currentRotation = other1.currentRotation;
  currentScale = other1.currentScale;
  __isset = other1.__isset;
  return *this;
}
void Viewfinder::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Viewfinder(";
  out << "cameraId=" << to_string(cameraId);
  out << ", " << "currentPosition=" << to_string(currentPosition);
  out << ", " << "currentRotation=" << to_string(currentRotation);
  out << ", " << "currentScale=" << to_string(currentScale);
  out << ")";
}

}} // namespace
