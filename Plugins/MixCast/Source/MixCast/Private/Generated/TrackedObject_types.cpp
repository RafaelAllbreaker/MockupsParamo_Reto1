/**
 * Autogenerated by Thrift Compiler (Shiyao Modified base on 0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "TrackedObject_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace mixcast { namespace data {


TrackedObject::~TrackedObject() throw() {
}


void TrackedObject::__set_identifier(const std::string& val) {
  this->identifier = val;
}

void TrackedObject::__set_name(const std::string& val) {
  this->name = val;
}

void TrackedObject::__set_source(const  ::mixcast::data::TrackingSource::type val) {
  this->source = val;
}

void TrackedObject::__set_objectType(const  ::mixcast::data::ObjectType::type val) {
  this->objectType = val;
}

void TrackedObject::__set_assignedRole(const  ::mixcast::data::AssignedRole::type val) {
  this->assignedRole = val;
}

void TrackedObject::__set_hideFromUser(const bool val) {
  this->hideFromUser = val;
}

void TrackedObject::__set_connected(const bool val) {
  this->connected = val;
}

void TrackedObject::__set_position(const  ::mixcast::thrift::Vector3& val) {
  this->position = val;
}

void TrackedObject::__set_rotation(const  ::mixcast::thrift::Quaternion& val) {
  this->rotation = val;
}
std::ostream& operator<<(std::ostream& out, const TrackedObject& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TrackedObject::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_identifier = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->identifier);
          isset_identifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->source = ( ::mixcast::data::TrackingSource::type)ecast0;
          this->__isset.source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->objectType = ( ::mixcast::data::ObjectType::type)ecast1;
          this->__isset.objectType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->assignedRole = ( ::mixcast::data::AssignedRole::type)ecast2;
          this->__isset.assignedRole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hideFromUser);
          this->__isset.hideFromUser = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->connected);
          this->__isset.connected = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->position.read(iprot);
          this->__isset.position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rotation.read(iprot);
          this->__isset.rotation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_identifier)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TrackedObject::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TrackedObject");

  xfer += oprot->writeFieldBegin("identifier", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->identifier);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("source", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->source);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objectType", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->objectType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("assignedRole", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->assignedRole);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hideFromUser", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->hideFromUser);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("connected", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->connected);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rotation", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->rotation.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TrackedObject &a, TrackedObject &b) {
  using ::std::swap;
  swap(a.identifier, b.identifier);
  swap(a.name, b.name);
  swap(a.source, b.source);
  swap(a.objectType, b.objectType);
  swap(a.assignedRole, b.assignedRole);
  swap(a.hideFromUser, b.hideFromUser);
  swap(a.connected, b.connected);
  swap(a.position, b.position);
  swap(a.rotation, b.rotation);
  swap(a.__isset, b.__isset);
}

TrackedObject::TrackedObject(const TrackedObject& other3) {
  identifier = other3.identifier;
  name = other3.name;
  source = other3.source;
  objectType = other3.objectType;
  assignedRole = other3.assignedRole;
  hideFromUser = other3.hideFromUser;
  connected = other3.connected;
  position = other3.position;
  rotation = other3.rotation;
  __isset = other3.__isset;
}
TrackedObject& TrackedObject::operator=(const TrackedObject& other4) {
  identifier = other4.identifier;
  name = other4.name;
  source = other4.source;
  objectType = other4.objectType;
  assignedRole = other4.assignedRole;
  hideFromUser = other4.hideFromUser;
  connected = other4.connected;
  position = other4.position;
  rotation = other4.rotation;
  __isset = other4.__isset;
  return *this;
}
void TrackedObject::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TrackedObject(";
  out << "identifier=" << to_string(identifier);
  out << ", " << "name=" << to_string(name);
  out << ", " << "source=" << to_string(source);
  out << ", " << "objectType=" << to_string(objectType);
  out << ", " << "assignedRole=" << to_string(assignedRole);
  out << ", " << "hideFromUser=" << to_string(hideFromUser);
  out << ", " << "connected=" << to_string(connected);
  out << ", " << "position=" << to_string(position);
  out << ", " << "rotation=" << to_string(rotation);
  out << ")";
}

}} // namespace
